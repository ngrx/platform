# This file configures the build at https://circleci.com/gh/ngrx/platform

# Opt-in to newer CircleCI system
# Complete documentation is at https://circleci.com/docs/2.0/
version: 2

# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
# See https://blog.daemonl.com/2016/02/yaml.html
# To validate changes, use an online parser, eg.
# https://yaml-online-parser.appspot.com/
var_1: &cache_key yarn-cache-{{ checksum "yarn.lock" }}
var_2: &run_in_ngcontainer
  docker:
    - image: angular/ngcontainer:0.1.0
var_3: &set_bazel_options
  run:
    command: sudo cp .circleci/bazel.rc /etc/bazel.bazelrc

jobs:

  # Enforce some static analysis invariants.
  # Note that generally, these should be checked only on the delta in each change,
  # otherwise any change to the static analysis config requires updating all the
  # code in the repo.
  # Also analyzing everything makes the lint job slow.
  lint:
    <<: *run_in_ngcontainer
    steps:
      - checkout
      - *set_bazel_options

      # Enforce that BUILD files are formatted.
      # Note that this uses the version of buildifier from the docker image -
      # take care that you use the same version when you run
      # buildifier locally on your change.
      - run: 'buildifier -mode=check $(find . -type f \( -name BUILD.bazel -or -name BUILD \)) ||
              (echo "BUILD files not formatted. Please run ''yarn buildifier''" ; exit 1)'

  bazel:
    <<: *run_in_ngcontainer
    steps:
      - checkout
      - *set_bazel_options

      - restore_cache:
          key: *cache_key

      # Helpful for debugging, so you can check you have the same bazel version when you need
      # to reproduce a failure.
      - run: bazel info release

      # Install the dependencies from NPM, using the node and yarn binaries managed by Bazel
      - run: bazel run @yarn//:yarn

      # Build and Test
      # Use bazel query so that we explicitly ask for all buildable targets to
      # be built even though we run `bazel test`
      # See https://github.com/bazelbuild/bazel/issues/4257
      - run: bazel query --output=label //... | xargs bazel test

  test:
    docker:
      - image: circleci/node:latest-browsers
    steps:
      - checkout
      - restore_cache:
          key: *cache_key
      - run: yarn
      - run: yarn run ci
      - run: yarn run example:build:prod
      - run: yarn run example:test --watch=false
      - save_cache:
          key: *cache_key
          paths:
            - ~/.cache/yarn
            - node_modules
  deploy:
    <<: *run_in_ngcontainer
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c9:c2:b4:5e:13:23:b6:6d:d8:29:3e:68:c6:40:9c:ec"
      - checkout
      - restore_cache:
          key: *cache_key
      - run: yarn
      - run: yarn run build
      - run: yarn run deploy:builds

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - lint
      - bazel
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master