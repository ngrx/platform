// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Feature Schematic should have all api actions in reducer if api flag enabled 1`] = `
"import { createFeature, createReducer, on } from '@ngrx/store';
import { FooActions } from './foo.actions';

export const fooFeatureKey = 'foo';

export interface State {

}

export const initialState: State = {

};

export const reducer = createReducer(
  initialState,
  on(FooActions.loadFoos, state => state),
  on(FooActions.loadFoosSuccess, (state, action) => state),
  on(FooActions.loadFoosFailure, (state, action) => state),
);

export const fooFeature = createFeature({
  name: fooFeatureKey,
  reducer,
});

"
`;

exports[`Feature Schematic should have all api actions with prefix in reducer if api flag enabled 1`] = `
"import { createFeature, createReducer, on } from '@ngrx/store';
import { FooActions } from './foo.actions';

export const fooFeatureKey = 'foo';

export interface State {

}

export const initialState: State = {

};

export const reducer = createReducer(
  initialState,
  on(FooActions.customFoos, state => state),
  on(FooActions.customFoosSuccess, (state, action) => state),
  on(FooActions.customFoosFailure, (state, action) => state),
);

export const fooFeature = createFeature({
  name: fooFeatureKey,
  reducer,
});

"
`;

exports[`Feature Schematic should have all api effect if api flag enabled 1`] = `
"import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, concatMap } from 'rxjs/operators';
import { Observable, EMPTY, of } from 'rxjs';
import { FooActions } from './foo.actions';


@Injectable()
export class FooEffects {

  loadFoos$ = createEffect(() => {
    return this.actions$.pipe(

      ofType(FooActions.loadFoos),
      concatMap(() =>
        /** An EMPTY observable only emits completion. Replace with your own observable API request */
        EMPTY.pipe(
          map(data => FooActions.loadFoosSuccess({ data })),
          catchError(error => of(FooActions.loadFoosFailure({ error }))))
      )
    );
  });


  constructor(private actions$: Actions) {}
}
"
`;

exports[`Feature Schematic should have all api effect with prefix if api flag enabled 1`] = `
"import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { catchError, map, concatMap } from 'rxjs/operators';
import { Observable, EMPTY, of } from 'rxjs';
import { FooActions } from './foo.actions';


@Injectable()
export class FooEffects {

  customFoos$ = createEffect(() => {
    return this.actions$.pipe(

      ofType(FooActions.customFoos),
      concatMap(() =>
        /** An EMPTY observable only emits completion. Replace with your own observable API request */
        EMPTY.pipe(
          map(data => FooActions.customFoosSuccess({ data })),
          catchError(error => of(FooActions.customFoosFailure({ error }))))
      )
    );
  });


  constructor(private actions$: Actions) {}
}
"
`;

exports[`Feature Schematic should respect the path provided for the feature name 1`] = `
"import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { StoreModule } from '@ngrx/store';
import * as fromFoo from './foo/reducers/foo.reducer';
import { EffectsModule } from '@ngrx/effects';
import { FooEffects } from './foo/effects/foo.effects';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    StoreModule.forFeature(fromFoo.fooFeatureKey, fromFoo.reducer),
    EffectsModule.forFeature([FooEffects])
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
"
`;
