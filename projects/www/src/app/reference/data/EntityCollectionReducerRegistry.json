{
  "name": "EntityCollectionReducerRegistry",
  "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry:class",
  "kind": "Class",
  "fileUrlPath": "../../dist/modules/data/src/reducers/entity-collection-reducer-registry.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Class",
      "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry:class",
      "docComment": "/**\n * Registry of entity types and their previously-constructed reducers. Can create a new CollectionReducer, which it registers for subsequent use.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare class EntityCollectionReducerRegistry "
        }
      ],
      "fileUrlPath": "../../dist/modules/data/src/reducers/entity-collection-reducer-registry.d.ts",
      "releaseTag": "Public",
      "isAbstract": false,
      "name": "EntityCollectionReducerRegistry",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Constructor",
          "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry:constructor(1)",
          "docComment": "/**\n * Constructs a new instance of the `EntityCollectionReducerRegistry` class\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "constructor(entityCollectionReducerFactory: "
            },
            {
              "kind": "Reference",
              "text": "EntityCollectionReducerFactory",
              "canonicalReference": "@ngrx/data!EntityCollectionReducerFactory:class"
            },
            { "kind": "Content", "text": ", entityCollectionMetaReducers?: " },
            {
              "kind": "Reference",
              "text": "MetaReducer",
              "canonicalReference": "@ngrx/store!MetaReducer:type"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityCollection",
              "canonicalReference": "@ngrx/data!EntityCollection:interface"
            },
            { "kind": "Content", "text": ", " },
            {
              "kind": "Reference",
              "text": "EntityAction",
              "canonicalReference": "@ngrx/data!EntityAction:interface"
            },
            { "kind": "Content", "text": ">[]" },
            { "kind": "Content", "text": ");" }
          ],
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityCollectionReducerFactory",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "entityCollectionMetaReducers",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 9 },
              "isOptional": true
            }
          ],
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Constructs a new instance of the `EntityCollectionReducerRegistry` class\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry#entityCollectionReducers:member",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "protected entityCollectionReducers: "
            },
            {
              "kind": "Reference",
              "text": "EntityCollectionReducers",
              "canonicalReference": "@ngrx/data!EntityCollectionReducers:interface"
            },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entityCollectionReducers",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "isStatic": false,
          "isProtected": true,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry#getOrCreateReducer:member(1)",
          "docComment": "/**\n * Get the registered EntityCollectionReducer<T> for this entity type or create one and register it.\n *\n * @param entityName - Name of the entity type for this reducer\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "getOrCreateReducer<T>(entityName: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "EntityCollectionReducer",
              "canonicalReference": "@ngrx/data!EntityCollectionReducer:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityName",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "getOrCreateReducer",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Get the registered EntityCollectionReducer<T> for this entity type or create one and register it.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entityName",
                "description": "Name of the entity type for this reducer\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry#registerReducer:member(1)",
          "docComment": "/**\n * Register an EntityCollectionReducer for an entity type\n *\n * @param entityName - the name of the entity type\n *\n * @param reducer - reducer for that entity type\n *\n * Examples: registerReducer('Hero', myHeroReducer); registerReducer('Villain', myVillainReducer);\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "registerReducer<T>(entityName: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ", reducer: " },
            {
              "kind": "Reference",
              "text": "EntityCollectionReducer",
              "canonicalReference": "@ngrx/data!EntityCollectionReducer:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "EntityCollectionReducer",
              "canonicalReference": "@ngrx/data!EntityCollectionReducer:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityName",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "reducer",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "registerReducer",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Register an EntityCollectionReducer for an entity type\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entityName",
                "description": "the name of the entity type\n\n"
              },
              {
                "name": "reducer",
                "description": "reducer for that entity type\n\nExamples: registerReducer('Hero', myHeroReducer); registerReducer('Villain', myVillainReducer);\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionReducerRegistry#registerReducers:member(1)",
          "docComment": "/**\n * Register a batch of EntityCollectionReducers.\n *\n * @param reducers - reducers to merge into existing reducers\n *\n * Examples: registerReducers({ Hero: myHeroReducer, Villain: myVillainReducer });\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "registerReducers(reducers: " },
            {
              "kind": "Reference",
              "text": "EntityCollectionReducers",
              "canonicalReference": "@ngrx/data!EntityCollectionReducers:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "reducers",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "registerReducers",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Register a batch of EntityCollectionReducers.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "reducers",
                "description": "reducers to merge into existing reducers\n\nExamples: registerReducers({ Hero: myHeroReducer, Villain: myVillainReducer });\n"
              }
            ]
          }
        }
      ],
      "implementsTokenRanges": [],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Registry of entity types and their previously-constructed reducers. Can create a new CollectionReducer, which it registers for subsequent use.\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": []
      }
    }
  ]
}
