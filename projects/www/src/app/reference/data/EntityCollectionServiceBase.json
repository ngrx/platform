{
  "name": "EntityCollectionServiceBase",
  "canonicalReference": "@ngrx/data!EntityCollectionServiceBase:class",
  "kind": "Class",
  "fileUrlPath": "../../dist/modules/data/src/entity-services/entity-collection-service-base.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Class",
      "canonicalReference": "@ngrx/data!EntityCollectionServiceBase:class",
      "docComment": "/**\n * Base class for a concrete EntityCollectionService<T>. Can be instantiated. Cannot be injected. Use EntityCollectionServiceFactory to create.\n *\n * @param EntityCollectionServiceElements - The ingredients for this service as a source of supporting services for creating an EntityCollectionService<T> instance.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare class EntityCollectionServiceBase<T, S$ extends "
        },
        {
          "kind": "Reference",
          "text": "EntitySelectors$",
          "canonicalReference": "@ngrx/data!EntitySelectors$:interface"
        },
        { "kind": "Content", "text": "<T>" },
        { "kind": "Content", "text": " = " },
        {
          "kind": "Reference",
          "text": "EntitySelectors$",
          "canonicalReference": "@ngrx/data!EntitySelectors$:interface"
        },
        { "kind": "Content", "text": "<T>" },
        { "kind": "Content", "text": "> implements " },
        {
          "kind": "Reference",
          "text": "EntityCollectionService",
          "canonicalReference": "@ngrx/data!EntityCollectionService:interface"
        },
        { "kind": "Content", "text": "<T>" },
        { "kind": "Content", "text": " " }
      ],
      "fileUrlPath": "../../dist/modules/data/src/entity-services/entity-collection-service-base.d.ts",
      "releaseTag": "Public",
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "S$",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 3 },
          "defaultTypeTokenRange": { "startIndex": 4, "endIndex": 6 }
        }
      ],
      "isAbstract": false,
      "name": "EntityCollectionServiceBase",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Constructor",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase:constructor(1)",
          "docComment": "/**\n * Constructs a new instance of the `EntityCollectionServiceBase` class\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "constructor(\n    entityName: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ", \n    serviceElementsFactory: " },
            {
              "kind": "Reference",
              "text": "EntityCollectionServiceElementsFactory",
              "canonicalReference": "@ngrx/data!EntityCollectionServiceElementsFactory:class"
            },
            { "kind": "Content", "text": ");" }
          ],
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityName",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "serviceElementsFactory",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": false
            }
          ],
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Constructs a new instance of the `EntityCollectionServiceBase` class\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#add:member(1)",
          "docComment": "/**\n * Dispatch action to save a new entity to remote storage.\n *\n * @param entity - entity to add, which may omit its key if pessimistic and the server creates the key; must have a key if optimistic save.\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns Observable of the entity after server reports successful save or the save error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "add(entity: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ", options: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            {
              "kind": "Content",
              "text": " & {\n        isOptimistic: false;\n    }"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 7, "endIndex": 9 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 6 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "add",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to save a new entity to remote storage.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the entity after server reports successful save or the save error.\n",
            "see": [],
            "params": [
              {
                "name": "entity",
                "description": "entity to add, which may omit its key if pessimistic and the server creates the key; must have a key if optimistic save.\n\n"
              },
              {
                "name": "options",
                "description": "options that influence save and merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#add:member(2)",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "add(entity: " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "add",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#addAllToCache:member(1)",
          "docComment": "/**\n * Replace all entities in the cached collection. Does not save to remote storage.\n *\n * @param entities - to add directly to cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "addAllToCache(entities: " },
            { "kind": "Content", "text": "T[]" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "addAllToCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Replace all entities in the cached collection. Does not save to remote storage.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entities",
                "description": "to add directly to cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#addManyToCache:member(1)",
          "docComment": "/**\n * Add multiple new entities directly to the cache. Does not save to remote storage. Entities with primary keys already in cache are ignored.\n *\n * @param entities - to add directly to cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "addManyToCache(entities: " },
            { "kind": "Content", "text": "T[]" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "addManyToCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Add multiple new entities directly to the cache. Does not save to remote storage. Entities with primary keys already in cache are ignored.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entities",
                "description": "to add directly to cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#addOneToCache:member(1)",
          "docComment": "/**\n * Add a new entity directly to the cache. Does not save to remote storage. Ignored if an entity with the same primary key is already in cache.\n *\n * @param entity - to add directly to cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "addOneToCache(entity: " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "addOneToCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Add a new entity directly to the cache. Does not save to remote storage. Ignored if an entity with the same primary key is already in cache.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entity",
                "description": "to add directly to cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#cancel:member(1)",
          "docComment": "/**\n * Dispatch action to cancel the persistence operation (query or save) with the given correlationId.\n *\n * @param correlationId - The correlation id for the corresponding EntityAction\n *\n * @param reason - explains why canceled and by whom.\n *\n * @param options - options such as the tag and mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "cancel(correlationId: " },
            { "kind": "Content", "text": "any" },
            { "kind": "Content", "text": ", reason?: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 7, "endIndex": 8 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "correlationId",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "reason",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "cancel",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to cancel the persistence operation (query or save) with the given correlationId.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "correlationId",
                "description": "The correlation id for the corresponding EntityAction\n\n"
              },
              {
                "name": "reason",
                "description": "explains why canceled and by whom.\n\n"
              },
              {
                "name": "options",
                "description": "options such as the tag and mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#changeState$:member",
          "docComment": "/**\n * Original entity values for entities with unsaved changes\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "changeState$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "ChangeStateMap",
              "canonicalReference": "@ngrx/data!ChangeStateMap:type"
            },
            { "kind": "Content", "text": "<T>> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "ChangeStateMap",
              "canonicalReference": "@ngrx/data!ChangeStateMap:type"
            },
            { "kind": "Content", "text": "<T>>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "changeState$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 9 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Original entity values for entities with unsaved changes\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#clearCache:member(1)",
          "docComment": "/**\n * Clear the cached entity collection\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "clearCache(): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [],
          "isOptional": false,
          "isAbstract": false,
          "name": "clearCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Clear the cached entity collection\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#collection$:member",
          "docComment": "/**\n * Observable of the collection as a whole\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "collection$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityCollection",
              "canonicalReference": "@ngrx/data!EntityCollection:interface"
            },
            { "kind": "Content", "text": "<T>> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityCollection",
              "canonicalReference": "@ngrx/data!EntityCollection:interface"
            },
            { "kind": "Content", "text": "<T>>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "collection$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 9 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of the collection as a whole\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#count$:member",
          "docComment": "/**\n * Observable of count of entities in the cached collection.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "count$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<number> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<number>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "count$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of count of entities in the cached collection.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#createAndDispatch:member(1)",
          "docComment": "/**\n * Create an {EntityAction} for this entity type and dispatch it immediately to the store.\n *\n * @param op - the entity operation\n *\n * @param data - the action data\n *\n * @param options - additional options\n *\n * @returns the dispatched EntityAction\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "createAndDispatch<P = " },
            { "kind": "Content", "text": "any" },
            { "kind": "Content", "text": ">(op: " },
            {
              "kind": "Reference",
              "text": "EntityOp",
              "canonicalReference": "@ngrx/data!EntityOp:enum"
            },
            { "kind": "Content", "text": ", data?: " },
            { "kind": "Content", "text": "P" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "EntityAction",
              "canonicalReference": "@ngrx/data!EntityAction:interface"
            },
            { "kind": "Content", "text": "<P>" },
            { "kind": "Content", "text": ";" }
          ],
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 1, "endIndex": 2 }
            }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 9, "endIndex": 11 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "op",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": false
            },
            {
              "parameterName": "data",
              "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
              "isOptional": true
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 7, "endIndex": 8 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "createAndDispatch",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Create an {EntityAction} for this entity type and dispatch it immediately to the store.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " the dispatched EntityAction\n",
            "see": [],
            "params": [
              { "name": "op", "description": "the entity operation\n\n" },
              { "name": "data", "description": "the action data\n\n" },
              { "name": "options", "description": "additional options\n\n" }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#createEntityAction:member(1)",
          "docComment": "/**\n * Create an {EntityAction} for this entity type.\n *\n * @param op - the entity operation\n *\n * @param data - the action data\n *\n * @param options - additional options\n *\n * @returns the EntityAction\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "createEntityAction<P = " },
            { "kind": "Content", "text": "any" },
            { "kind": "Content", "text": ">(op: " },
            {
              "kind": "Reference",
              "text": "EntityOp",
              "canonicalReference": "@ngrx/data!EntityOp:enum"
            },
            { "kind": "Content", "text": ", data?: " },
            { "kind": "Content", "text": "P" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "EntityAction",
              "canonicalReference": "@ngrx/data!EntityAction:interface"
            },
            { "kind": "Content", "text": "<P>" },
            { "kind": "Content", "text": ";" }
          ],
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 1, "endIndex": 2 }
            }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 9, "endIndex": 11 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "op",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": false
            },
            {
              "parameterName": "data",
              "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
              "isOptional": true
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 7, "endIndex": 8 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "createEntityAction",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Create an {EntityAction} for this entity type.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " the EntityAction\n",
            "see": [],
            "params": [
              { "name": "op", "description": "the entity operation\n\n" },
              { "name": "data", "description": "the action data\n\n" },
              { "name": "options", "description": "additional options\n\n" }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#delete:member(1)",
          "docComment": "/**\n * Dispatch action to delete entity from remote storage by key.\n *\n * @param key - The entity to delete\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns Observable of the deleted key after server reports successful save or the save error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "delete(entity: " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<number | string>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "delete",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to delete entity from remote storage by key.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the deleted key after server reports successful save or the save error.\n",
            "see": [],
            "params": [
              { "name": "key", "description": "The entity to delete\n\n" },
              {
                "name": "options",
                "description": "options that influence save and merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#delete:member(2)",
          "docComment": "/**\n * Dispatch action to delete entity from remote storage by key.\n *\n * @param key - The primary key of the entity to remove\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns Observable of the deleted key after server reports successful save or the save error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "delete(key: " },
            { "kind": "Content", "text": "number | string" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<number | string>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "delete",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to delete entity from remote storage by key.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the deleted key after server reports successful save or the save error.\n",
            "see": [],
            "params": [
              {
                "name": "key",
                "description": "The primary key of the entity to remove\n\n"
              },
              {
                "name": "options",
                "description": "options that influence save and merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#dispatch:member(1)",
          "docComment": "/**\n * Dispatch an action of any type to the ngrx store.\n *\n * @param action - the Action\n *\n * @returns the dispatched Action\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "dispatch(action: " },
            {
              "kind": "Reference",
              "text": "Action",
              "canonicalReference": "@ngrx/store!Action:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Action",
              "canonicalReference": "@ngrx/store!Action:interface"
            },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "action",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "dispatch",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch an action of any type to the ngrx store.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " the dispatched Action\n",
            "see": [],
            "params": [{ "name": "action", "description": "the Action\n\n" }]
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#dispatcher:member",
          "docComment": "/**\n * Dispatcher of EntityCommands (EntityActions)\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "readonly dispatcher: " },
            {
              "kind": "Reference",
              "text": "EntityDispatcher",
              "canonicalReference": "@ngrx/data!EntityDispatcher:interface"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "dispatcher",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatcher of EntityCommands (EntityActions)\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#entities$:member",
          "docComment": "/**\n * Observable of all entities in the cached collection.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "entities$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T[]> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<T[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entities$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of all entities in the cached collection.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#entityActions$:member",
          "docComment": "/**\n * Observable of actions related to this entity type.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "entityActions$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityAction",
              "canonicalReference": "@ngrx/data!EntityAction:interface"
            },
            { "kind": "Content", "text": ">" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entityActions$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of actions related to this entity type.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#entityMap$:member",
          "docComment": "/**\n * Observable of the map of entity keys to entities\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "entityMap$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@ngrx/entity!Dictionary:class"
            },
            { "kind": "Content", "text": "<T>> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "Dictionary",
              "canonicalReference": "@ngrx/entity!Dictionary:class"
            },
            { "kind": "Content", "text": "<T>>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entityMap$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 9 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of the map of entity keys to entities\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#entityName:member",
          "docComment": "/**\n * Name of the entity type of this collection service\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "readonly entityName: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entityName",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Name of the entity type of this collection service\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#errors$:member",
          "docComment": "/**\n * Observable of error actions related to this entity type.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "errors$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityAction",
              "canonicalReference": "@ngrx/data!EntityAction:interface"
            },
            { "kind": "Content", "text": ">" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "errors$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of error actions related to this entity type.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#filter$:member",
          "docComment": "/**\n * Observable of the filter pattern applied by the entity collection's filter function\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "filter$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<any> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<any>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "filter$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of the filter pattern applied by the entity collection's filter function\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#filteredEntities$:member",
          "docComment": "/**\n * Observable of entities in the cached collection that pass the filter function\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "filteredEntities$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T[]> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<T[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "filteredEntities$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of entities in the cached collection that pass the filter function\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#getAll:member(1)",
          "docComment": "/**\n * Dispatch action to query remote storage for all entities and merge the queried entities into the cached collection.\n *\n * @param options - options that influence merge behavior\n *\n * @returns Observable of the collection after server reports successful query or the query error.\n *\n * @see\n *\n * load()\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "getAll(options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "getAll",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to query remote storage for all entities and merge the queried entities into the cached collection.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the collection after server reports successful query or the query error.\n\n",
            "see": ["\n\nload()\n"],
            "params": [
              {
                "name": "options",
                "description": "options that influence merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#getByKey:member(1)",
          "docComment": "/**\n * Dispatch action to query remote storage for the entity with this primary key. If the server returns an entity, merge it into the cached collection.\n *\n * @param key - The primary key of the entity to get.\n *\n * @param options - options that influence merge behavior\n *\n * @returns Observable of the queried entity that is in the collection after server reports success or the query error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "getByKey(key: " },
            { "kind": "Content", "text": "any" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "getByKey",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to query remote storage for the entity with this primary key. If the server returns an entity, merge it into the cached collection.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the queried entity that is in the collection after server reports success or the query error.\n",
            "see": [],
            "params": [
              {
                "name": "key",
                "description": "The primary key of the entity to get.\n\n"
              },
              {
                "name": "options",
                "description": "options that influence merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#getWithQuery:member(1)",
          "docComment": "/**\n * Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and merge the results into the cached collection.\n *\n * @param queryParams - the query in a form understood by the server\n *\n * @param options - options that influence merge behavior\n *\n * @returns Observable of the queried entities after server reports successful query or the query error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "getWithQuery(queryParams: " },
            {
              "kind": "Reference",
              "text": "QueryParams",
              "canonicalReference": "@ngrx/data!QueryParams:interface"
            },
            { "kind": "Content", "text": " | string" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "queryParams",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "getWithQuery",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and merge the results into the cached collection.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the queried entities after server reports successful query or the query error.\n",
            "see": [],
            "params": [
              {
                "name": "queryParams",
                "description": "the query in a form understood by the server\n\n"
              },
              {
                "name": "options",
                "description": "options that influence merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#guard:member",
          "docComment": "/**\n * Utility class with methods to validate EntityAction payloads.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "guard: " },
            {
              "kind": "Reference",
              "text": "EntityActionGuard",
              "canonicalReference": "@ngrx/data!EntityActionGuard:class"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "guard",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Utility class with methods to validate EntityAction payloads.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#keys$:member",
          "docComment": "/**\n * Observable of the keys of the cached collection, in the collection's native sort order\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "keys$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<string[] | number[]> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<string[] | number[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "keys$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of the keys of the cached collection, in the collection's native sort order\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#load:member(1)",
          "docComment": "/**\n * Dispatch action to query remote storage for all entities and completely replace the cached collection with the queried entities.\n *\n * @param options - options that influence load behavior\n *\n * @returns Observable of the collection after server reports successful query or the query error.\n *\n * @see\n *\n * getAll\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "load(options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 5 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "load",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to query remote storage for all entities and completely replace the cached collection with the queried entities.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the collection after server reports successful query or the query error.\n\n",
            "see": ["\n\ngetAll\n"],
            "params": [
              {
                "name": "options",
                "description": "options that influence load behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#loaded$:member",
          "docComment": "/**\n * Observable true when the collection has been loaded\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "loaded$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<boolean> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<boolean>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "loaded$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable true when the collection has been loaded\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#loading$:member",
          "docComment": "/**\n * Observable true when a multi-entity query command is in progress.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "loading$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<boolean> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<boolean>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "loading$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable true when a multi-entity query command is in progress.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#loadWithQuery:member(1)",
          "docComment": "/**\n * Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and completely replace the cached collection with the queried entities.\n *\n * @param queryParams - the query in a form understood by the server\n *\n * @param options - options that influence load behavior\n *\n * @returns Observable of the queried entities after server reports successful query or the query error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "loadWithQuery(queryParams: " },
            {
              "kind": "Reference",
              "text": "QueryParams",
              "canonicalReference": "@ngrx/data!QueryParams:interface"
            },
            { "kind": "Content", "text": " | string" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T[]>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "queryParams",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "loadWithQuery",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and completely replace the cached collection with the queried entities.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the queried entities after server reports successful query or the query error.\n",
            "see": [],
            "params": [
              {
                "name": "queryParams",
                "description": "the query in a form understood by the server\n\n"
              },
              {
                "name": "options",
                "description": "options that influence load behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#removeManyFromCache:member(1)",
          "docComment": "/**\n * Remove multiple entities directly from the cache. Does not delete these entities from remote storage.\n *\n * @param entity - The entities to remove\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "removeManyFromCache(entities: " },
            { "kind": "Content", "text": "T[]" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "removeManyFromCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Remove multiple entities directly from the cache. Does not delete these entities from remote storage.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              { "name": "entity", "description": "The entities to remove\n\n" },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#removeManyFromCache:member(2)",
          "docComment": "/**\n * Remove multiple entities directly from the cache. Does not delete these entities from remote storage.\n *\n * @param keys - The primary keys of the entities to remove\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "removeManyFromCache(keys: " },
            { "kind": "Content", "text": "(number | string)[]" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "keys",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "removeManyFromCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Remove multiple entities directly from the cache. Does not delete these entities from remote storage.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "keys",
                "description": "The primary keys of the entities to remove\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#removeOneFromCache:member(1)",
          "docComment": "/**\n * Remove an entity directly from the cache. Does not delete that entity from remote storage.\n *\n * @param entity - The entity to remove\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "removeOneFromCache(entity: " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "removeOneFromCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Remove an entity directly from the cache. Does not delete that entity from remote storage.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              { "name": "entity", "description": "The entity to remove\n\n" },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#removeOneFromCache:member(2)",
          "docComment": "/**\n * Remove an entity directly from the cache. Does not delete that entity from remote storage.\n *\n * @param key - The primary key of the entity to remove\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "removeOneFromCache(key: " },
            { "kind": "Content", "text": "number | string" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "removeOneFromCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Remove an entity directly from the cache. Does not delete that entity from remote storage.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "key",
                "description": "The primary key of the entity to remove\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#selectId:member",
          "docComment": "/**\n * Returns the primary key (id) of this entity\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "selectId: " },
            {
              "kind": "Reference",
              "text": "IdSelector",
              "canonicalReference": "@ngrx/entity!IdSelector:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "selectId",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Returns the primary key (id) of this entity\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#selectors:member",
          "docComment": "/**\n * All selectors of entity collection properties\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "readonly selectors: " },
            {
              "kind": "Reference",
              "text": "EntitySelectors",
              "canonicalReference": "@ngrx/data!EntitySelectors:interface"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "selectors",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "All selectors of entity collection properties\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#selectors$:member",
          "docComment": "/**\n * All selectors$ (observables of entity collection properties)\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "readonly selectors$: " },
            { "kind": "Content", "text": "S$" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "selectors$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "All selectors$ (observables of entity collection properties)\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#setFilter:member(1)",
          "docComment": "/**\n * Set the pattern that the collection's filter applies when using the `filteredEntities` selector.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "setFilter(pattern: " },
            { "kind": "Content", "text": "any" },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pattern",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "setFilter",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Set the pattern that the collection's filter applies when using the `filteredEntities` selector.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#setLoaded:member(1)",
          "docComment": "/**\n * Set the loaded flag\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "setLoaded(isLoaded: " },
            { "kind": "Content", "text": "boolean" },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "isLoaded",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "setLoaded",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Set the loaded flag\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#setLoading:member(1)",
          "docComment": "/**\n * Set the loading flag\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "setLoading(isLoading: " },
            { "kind": "Content", "text": "boolean" },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "isLoading",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "setLoading",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Set the loading flag\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#store:member",
          "docComment": "/**\n * The NgRx Store for the {EntityCache}\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "get store(): " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            {
              "kind": "Content",
              "text": "<import(\"@ngrx/data\").EntityCache>"
            },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "store",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "The NgRx Store for the {EntityCache}\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#toUpdate:member",
          "docComment": "/**\n * Convert an entity (or partial entity) into the `Update<T>` object `update...` and `upsert...` methods take `Update<T>` args\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "toUpdate: " },
            { "kind": "Content", "text": "(entity: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>) => " },
            {
              "kind": "Reference",
              "text": "Update",
              "canonicalReference": "@ngrx/entity!Update:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": false,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "toUpdate",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 6 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Convert an entity (or partial entity) into the `Update<T>` object `update...` and `upsert...` methods take `Update<T>` args\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#update:member(1)",
          "docComment": "/**\n * Dispatch action to save the updated entity (or partial entity) in remote storage. The update entity may be partial (but must have its key) in which case it patches the existing entity.\n *\n * @param entity - update entity, which might be a partial of T but must at least have its key.\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns Observable of the updated entity after server reports successful save or the save error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "update(entity: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 8 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "update",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to save the updated entity (or partial entity) in remote storage. The update entity may be partial (but must have its key) in which case it patches the existing entity.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the updated entity after server reports successful save or the save error.\n",
            "see": [],
            "params": [
              {
                "name": "entity",
                "description": "update entity, which might be a partial of T but must at least have its key.\n\n"
              },
              {
                "name": "options",
                "description": "options that influence save and merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#updateManyInCache:member(1)",
          "docComment": "/**\n * Update multiple cached entities directly. Does not update these entities in remote storage. Entities whose primary keys are not in cache are ignored. Update entities may be partial but must at least have their keys. such partial entities patch their cached counterparts.\n *\n * @param entities - to update directly in cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "updateManyInCache(entities: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>[]" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "updateManyInCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Update multiple cached entities directly. Does not update these entities in remote storage. Entities whose primary keys are not in cache are ignored. Update entities may be partial but must at least have their keys. such partial entities patch their cached counterparts.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entities",
                "description": "to update directly in cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#updateOneInCache:member(1)",
          "docComment": "/**\n * Update a cached entity directly. Does not update that entity in remote storage. Ignored if an entity with matching primary key is not in cache. The update entity may be partial (but must have its key) in which case it patches the existing entity.\n *\n * @param entity - to update directly in cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "updateOneInCache(entity: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "updateOneInCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Update a cached entity directly. Does not update that entity in remote storage. Ignored if an entity with matching primary key is not in cache. The update entity may be partial (but must have its key) in which case it patches the existing entity.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entity",
                "description": "to update directly in cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#upsert:member(1)",
          "docComment": "/**\n * Dispatch action to save a new or existing entity to remote storage. Call only if the server supports upsert.\n *\n * @param entity - entity to add or upsert. It may omit its key if an add, and is pessimistic, and the server creates the key; must have a key if optimistic save.\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns Observable of the entity after server reports successful save or the save error.\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "upsert(entity: " },
            { "kind": "Content", "text": "T" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "upsert",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch action to save a new or existing entity to remote storage. Call only if the server supports upsert.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": " Observable of the entity after server reports successful save or the save error.\n",
            "see": [],
            "params": [
              {
                "name": "entity",
                "description": "entity to add or upsert. It may omit its key if an add, and is pessimistic, and the server creates the key; must have a key if optimistic save.\n\n"
              },
              {
                "name": "options",
                "description": "options that influence save and merge behavior\n\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#upsertManyInCache:member(1)",
          "docComment": "/**\n * Insert or update multiple cached entities directly. Does not save to remote storage. Upsert entities might be partial but must at least have their keys. Pass an array of the Update<T> structure as the payload.\n *\n * @param entities - to upsert directly in cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "upsertManyInCache(entities: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>[]" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entities",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "upsertManyInCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Insert or update multiple cached entities directly. Does not save to remote storage. Upsert entities might be partial but must at least have their keys. Pass an array of the Update<T> structure as the payload.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entities",
                "description": "to upsert directly in cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityCollectionServiceBase#upsertOneInCache:member(1)",
          "docComment": "/**\n * Insert or update a cached entity directly. Does not save to remote storage. Upsert entity might be a partial of T but must at least have its key. Pass the Update<T> structure as the payload.\n *\n * @param entity - to upsert directly in cache.\n *\n * @param options - options such as mergeStrategy\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "upsertOneInCache(entity: " },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ", options?: " },
            {
              "kind": "Reference",
              "text": "EntityActionOptions",
              "canonicalReference": "@ngrx/data!EntityActionOptions:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 6, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entity",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
              "isOptional": true
            }
          ],
          "isOptional": false,
          "isAbstract": false,
          "name": "upsertOneInCache",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Insert or update a cached entity directly. Does not save to remote storage. Upsert entity might be a partial of T but must at least have its key. Pass the Update<T> structure as the payload.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entity",
                "description": "to upsert directly in cache.\n\n"
              },
              {
                "name": "options",
                "description": "options such as mergeStrategy\n"
              }
            ]
          }
        }
      ],
      "implementsTokenRanges": [{ "startIndex": 7, "endIndex": 9 }],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Base class for a concrete EntityCollectionService<T>. Can be instantiated. Cannot be injected. Use EntityCollectionServiceFactory to create.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [
          {
            "name": "EntityCollectionServiceElements",
            "description": "The ingredients for this service as a source of supporting services for creating an EntityCollectionService<T> instance.\n"
          }
        ]
      }
    }
  ]
}
