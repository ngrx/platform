{"name":"EntityServerCommands","canonicalReference":"@ngrx/data!EntityServerCommands:interface","kind":"Interface","fileUrlPath":"../../dist/modules/data/src/dispatchers/entity-commands.d.ts","isDeprecated":false,"members":[{"kind":"Interface","canonicalReference":"@ngrx/data!EntityServerCommands:interface","docComment":"/**\n * Commands that update the remote server.\n */\n","excerptTokens":[{"kind":"Content","text":"export interface EntityServerCommands<T> "}],"fileUrlPath":"../../dist/modules/data/src/dispatchers/entity-commands.d.ts","releaseTag":"Public","typeParameters":[{"typeParameterName":"T","constraintTokenRange":{"startIndex":0,"endIndex":0},"defaultTypeTokenRange":{"startIndex":0,"endIndex":0}}],"name":"EntityServerCommands","preserveMemberOrder":false,"members":[{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#add:member(1)","docComment":"/**\n * Dispatch action to save a new entity to remote storage.\n *\n * @param entity - entity to add, which may omit its key if pessimistic and the server creates the key; must have a key if optimistic save.\n *\n * @returns A terminating Observable of the entity after server reports successful save or the save error.\n */\n","excerptTokens":[{"kind":"Content","text":"add(entity: "},{"kind":"Reference","text":"Partial","canonicalReference":"!Partial:type"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":" & {\n        isOptimistic?: false;\n    }"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":7,"endIndex":9},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"entity","parameterTypeTokenRange":{"startIndex":1,"endIndex":3},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":4,"endIndex":6},"isOptional":true}],"name":"add","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to save a new entity to remote storage.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the entity after server reports successful save or the save error.\n","see":[],"params":[{"name":"entity","description":"entity to add, which may omit its key if pessimistic and the server creates the key; must have a key if optimistic save.\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#add:member(2)","docComment":"","excerptTokens":[{"kind":"Content","text":"add(entity: "},{"kind":"Content","text":"T"},{"kind":"Content","text":", options: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":" & {\n        isOptimistic: true;\n    }"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":6,"endIndex":8},"releaseTag":"Public","overloadIndex":2,"parameters":[{"parameterName":"entity","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":3,"endIndex":5},"isOptional":false}],"name":"add","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"","usageNotes":"","remarks":"","deprecated":"","returns":"","see":[],"params":[]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#add:member(3)","docComment":"","excerptTokens":[{"kind":"Content","text":"add(entity: "},{"kind":"Content","text":"T"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":5,"endIndex":7},"releaseTag":"Public","overloadIndex":3,"parameters":[{"parameterName":"entity","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":3,"endIndex":4},"isOptional":true}],"name":"add","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"","usageNotes":"","remarks":"","deprecated":"","returns":"","see":[],"params":[]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#cancel:member(1)","docComment":"/**\n * Dispatch action to cancel the persistence operation (query or save) with the given correlationId.\n *\n * @param correlationId - The correlation id for the corresponding EntityAction\n *\n * @param reason - explains why canceled and by whom.\n *\n * @param options - options such as the tag\n */\n","excerptTokens":[{"kind":"Content","text":"cancel(correlationId: "},{"kind":"Content","text":"any"},{"kind":"Content","text":", reason?: "},{"kind":"Content","text":"string"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Content","text":"void"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":7,"endIndex":8},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"correlationId","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"reason","parameterTypeTokenRange":{"startIndex":3,"endIndex":4},"isOptional":true},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":5,"endIndex":6},"isOptional":true}],"name":"cancel","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to cancel the persistence operation (query or save) with the given correlationId.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":"","see":[],"params":[{"name":"correlationId","description":"The correlation id for the corresponding EntityAction\n\n"},{"name":"reason","description":"explains why canceled and by whom.\n\n"},{"name":"options","description":"options such as the tag\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#delete:member(1)","docComment":"/**\n * Dispatch action to delete entity from remote storage by key.\n *\n * @param key - The entity to delete\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns A terminating Observable of the deleted key after server reports successful save or the save error.\n */\n","excerptTokens":[{"kind":"Content","text":"delete(entity: "},{"kind":"Content","text":"T"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<number | string>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":5,"endIndex":7},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"entity","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":3,"endIndex":4},"isOptional":true}],"name":"delete","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to delete entity from remote storage by key.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the deleted key after server reports successful save or the save error.\n","see":[],"params":[{"name":"key","description":"The entity to delete\n\n"},{"name":"options","description":"options that influence save and merge behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#delete:member(2)","docComment":"/**\n * Dispatch action to delete entity from remote storage by key.\n *\n * @param key - The primary key of the entity to remove\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns Observable of the deleted key after server reports successful save or the save error.\n */\n","excerptTokens":[{"kind":"Content","text":"delete(key: "},{"kind":"Content","text":"number | string"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<number | string>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":5,"endIndex":7},"releaseTag":"Public","overloadIndex":2,"parameters":[{"parameterName":"key","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":3,"endIndex":4},"isOptional":true}],"name":"delete","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to delete entity from remote storage by key.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" Observable of the deleted key after server reports successful save or the save error.\n","see":[],"params":[{"name":"key","description":"The primary key of the entity to remove\n\n"},{"name":"options","description":"options that influence save and merge behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#getAll:member(1)","docComment":"/**\n * Dispatch action to query remote storage for all entities and merge the queried entities into the cached collection.\n *\n * @param options - options that influence merge behavior\n *\n * @returns A terminating Observable of the collection after server reports successful query or the query error.\n *\n * @see\n *\n * load()\n */\n","excerptTokens":[{"kind":"Content","text":"getAll(options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T[]>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":3,"endIndex":5},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"options","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":true}],"name":"getAll","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to query remote storage for all entities and merge the queried entities into the cached collection.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the collection after server reports successful query or the query error.\n\n","see":["\n\nload()\n"],"params":[{"name":"options","description":"options that influence merge behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#getByKey:member(1)","docComment":"/**\n * Dispatch action to query remote storage for the entity with this primary key. If the server returns an entity, merge it into the cached collection.\n *\n * @param key - The primary key of the entity to get.\n *\n * @param options - options that influence merge behavior\n *\n * @returns A terminating Observable of the queried entities that are in the collection after server reports success or the query error.\n */\n","excerptTokens":[{"kind":"Content","text":"getByKey(key: "},{"kind":"Content","text":"any"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":5,"endIndex":7},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"key","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":3,"endIndex":4},"isOptional":true}],"name":"getByKey","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to query remote storage for the entity with this primary key. If the server returns an entity, merge it into the cached collection.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the queried entities that are in the collection after server reports success or the query error.\n","see":[],"params":[{"name":"key","description":"The primary key of the entity to get.\n\n"},{"name":"options","description":"options that influence merge behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#getWithQuery:member(1)","docComment":"/**\n * Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and merge the results into the cached collection.\n *\n * @param queryParams - the query in a form understood by the server\n *\n * @param options - options that influence merge behavior\n *\n * @returns A terminating Observable of the queried entities after server reports successful query or the query error.\n */\n","excerptTokens":[{"kind":"Content","text":"getWithQuery(queryParams: "},{"kind":"Reference","text":"QueryParams","canonicalReference":"@ngrx/data!QueryParams:interface"},{"kind":"Content","text":" | string"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T[]>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":6,"endIndex":8},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"queryParams","parameterTypeTokenRange":{"startIndex":1,"endIndex":3},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":4,"endIndex":5},"isOptional":true}],"name":"getWithQuery","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and merge the results into the cached collection.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the queried entities after server reports successful query or the query error.\n","see":[],"params":[{"name":"queryParams","description":"the query in a form understood by the server\n\n"},{"name":"options","description":"options that influence merge behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#load:member(1)","docComment":"/**\n * Dispatch action to query remote storage for all entities and completely replace the cached collection with the queried entities.\n *\n * @param options - options that influence load behavior\n *\n * @returns A terminating Observable of the entities in the collection after server reports successful query or the query error.\n *\n * @see\n *\n * getAll\n */\n","excerptTokens":[{"kind":"Content","text":"load(options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T[]>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":3,"endIndex":5},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"options","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":true}],"name":"load","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to query remote storage for all entities and completely replace the cached collection with the queried entities.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the entities in the collection after server reports successful query or the query error.\n\n","see":["\n\ngetAll\n"],"params":[{"name":"options","description":"options that influence load behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#loadWithQuery:member(1)","docComment":"/**\n * Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and completely replace the cached collection with the queried entities.\n *\n * @param queryParams - the query in a form understood by the server\n *\n * @param options - options that influence load behavior\n *\n * @returns A terminating Observable of the entities in the collection after server reports successful query or the query error.\n *\n * @see\n *\n * getWithQuery\n */\n","excerptTokens":[{"kind":"Content","text":"loadWithQuery(queryParams: "},{"kind":"Reference","text":"QueryParams","canonicalReference":"@ngrx/data!QueryParams:interface"},{"kind":"Content","text":" | string"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T[]>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":6,"endIndex":8},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"queryParams","parameterTypeTokenRange":{"startIndex":1,"endIndex":3},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":4,"endIndex":5},"isOptional":true}],"name":"loadWithQuery","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to query remote storage for the entities that satisfy a query expressed with either a query parameter map or an HTTP URL query string, and completely replace the cached collection with the queried entities.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the entities in the collection after server reports successful query or the query error.\n\n","see":["\n\ngetWithQuery\n"],"params":[{"name":"queryParams","description":"the query in a form understood by the server\n\n"},{"name":"options","description":"options that influence load behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#update:member(1)","docComment":"/**\n * Dispatch action to save the updated entity (or partial entity) in remote storage. The update entity may be partial (but must have its key) in which case it patches the existing entity.\n *\n * @param entity - update entity, which might be a partial of T but must at least have its key.\n *\n * @param options - options that influence save and merge behavior\n *\n * @returns A terminating Observable of the updated entity after server reports successful save or the save error.\n */\n","excerptTokens":[{"kind":"Content","text":"update(entity: "},{"kind":"Reference","text":"Partial","canonicalReference":"!Partial:type"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":6,"endIndex":8},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"entity","parameterTypeTokenRange":{"startIndex":1,"endIndex":3},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":4,"endIndex":5},"isOptional":true}],"name":"update","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to save the updated entity (or partial entity) in remote storage. The update entity may be partial (but must have its key) in which case it patches the existing entity.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the updated entity after server reports successful save or the save error.\n","see":[],"params":[{"name":"entity","description":"update entity, which might be a partial of T but must at least have its key.\n\n"},{"name":"options","description":"options that influence save and merge behavior\n\n"}]}},{"kind":"MethodSignature","canonicalReference":"@ngrx/data!EntityServerCommands#upsert:member(1)","docComment":"/**\n * Dispatch action to save a new or update an existing entity to remote storage. Only dispatch this action if your server supports upsert.\n *\n * @param entity - entity to upsert, which may omit its key if pessimistic and the server creates the key; must have a key if optimistic save.\n *\n * @returns A terminating Observable of the entity after server reports successful save or the save error.\n */\n","excerptTokens":[{"kind":"Content","text":"upsert(entity: "},{"kind":"Content","text":"T"},{"kind":"Content","text":", options?: "},{"kind":"Reference","text":"EntityActionOptions","canonicalReference":"@ngrx/data!EntityActionOptions:interface"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"Observable","canonicalReference":"rxjs!Observable:class"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":";"}],"isOptional":false,"returnTypeTokenRange":{"startIndex":5,"endIndex":7},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"entity","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"options","parameterTypeTokenRange":{"startIndex":3,"endIndex":4},"isOptional":true}],"name":"upsert","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Dispatch action to save a new or update an existing entity to remote storage. Only dispatch this action if your server supports upsert.\n\n","usageNotes":"","remarks":"","deprecated":"","returns":" A terminating Observable of the entity after server reports successful save or the save error.\n","see":[],"params":[{"name":"entity","description":"entity to upsert, which may omit its key if pessimistic and the server creates the key; must have a key if optimistic save.\n\n"}]}}],"extendsTokenRanges":[],"docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Commands that update the remote server.\n","usageNotes":"","remarks":"","deprecated":"","returns":"","see":[],"params":[]}}]}