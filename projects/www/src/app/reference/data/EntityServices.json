{
  "name": "EntityServices",
  "canonicalReference": "@ngrx/data!EntityServices:class",
  "kind": "Class",
  "fileUrlPath": "../../dist/modules/data/src/entity-services/entity-services.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Class",
      "canonicalReference": "@ngrx/data!EntityServices:class",
      "docComment": "/**\n * Class-Interface for EntityCache and EntityCollection services. Serves as an Angular provider token for this service class. Includes a registry of EntityCollectionServices for all entity types. Creates a new default EntityCollectionService for any entity type not in the registry. Optionally register specialized EntityCollectionServices for individual types\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare abstract class EntityServices "
        }
      ],
      "fileUrlPath": "../../dist/modules/data/src/entity-services/entity-services.d.ts",
      "releaseTag": "Public",
      "isAbstract": true,
      "name": "EntityServices",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityServices#dispatch:member(1)",
          "docComment": "/**\n * Dispatch any action to the store\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "abstract dispatch(action: " },
            {
              "kind": "Reference",
              "text": "Action",
              "canonicalReference": "@ngrx/store!Action:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "action",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": true,
          "name": "dispatch",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Dispatch any action to the store\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityServices#entityActionErrors$:member",
          "docComment": "/**\n * Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "abstract readonly entityActionErrors$: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityAction",
              "canonicalReference": "@ngrx/data!EntityAction:interface"
            },
            { "kind": "Content", "text": ">" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entityActionErrors$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": true,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of error EntityActions (e.g. QUERY_ALL_ERROR) for all entity types\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityServices#entityCache$:member",
          "docComment": "/**\n * Observable of the entire entity cache\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "abstract readonly entityCache$: " },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityCache",
              "canonicalReference": "@ngrx/data!EntityCache:interface"
            },
            { "kind": "Content", "text": "> | " },
            {
              "kind": "Reference",
              "text": "Store",
              "canonicalReference": "@ngrx/store!Store:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "EntityCache",
              "canonicalReference": "@ngrx/data!EntityCache:interface"
            },
            { "kind": "Content", "text": ">" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "entityCache$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 9 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": true,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Observable of the entire entity cache\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityServices#getEntityCollectionService:member(1)",
          "docComment": "/**\n * Get (or create) the singleton instance of an EntityCollectionService\n *\n * @param entityName - Name of the entity type of the service\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "abstract getEntityCollectionService<T = "
            },
            { "kind": "Content", "text": "any" },
            { "kind": "Content", "text": ">(entityName: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": "): " },
            {
              "kind": "Reference",
              "text": "EntityCollectionService",
              "canonicalReference": "@ngrx/data!EntityCollectionService:interface"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": ";" }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 1, "endIndex": 2 }
            }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 5, "endIndex": 7 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityName",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": true,
          "name": "getEntityCollectionService",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Get (or create) the singleton instance of an EntityCollectionService\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entityName",
                "description": "Name of the entity type of the service\n"
              }
            ]
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!EntityServices#reducedActions$:member",
          "docComment": "/**\n * Actions scanned by the store after it processed them with reducers. A replay observable of the most recent Action (not just EntityAction) reduced by the store.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "abstract readonly reducedActions$: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            { "kind": "Content", "text": "<" },
            {
              "kind": "Reference",
              "text": "Action",
              "canonicalReference": "@ngrx/store!Action:interface"
            },
            { "kind": "Content", "text": ">" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "reducedActions$",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 5 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": true,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Actions scanned by the store after it processed them with reducers. A replay observable of the most recent Action (not just EntityAction) reduced by the store.\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityServices#registerEntityCollectionService:member(1)",
          "docComment": "/**\n * Register an EntityCollectionService under its entity type name. Will replace a pre-existing service for that type.\n *\n * @param service - The entity service\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "abstract registerEntityCollectionService<T>(service: "
            },
            {
              "kind": "Reference",
              "text": "EntityCollectionService",
              "canonicalReference": "@ngrx/data!EntityCollectionService:interface"
            },
            { "kind": "Content", "text": "<T>" },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": { "startIndex": 0, "endIndex": 0 },
              "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
            }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "service",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": true,
          "name": "registerEntityCollectionService",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Register an EntityCollectionService under its entity type name. Will replace a pre-existing service for that type.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              { "name": "service", "description": "The entity service\n" }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityServices#registerEntityCollectionServices:member(1)",
          "docComment": "/**\n * Register entity services for several entity types at once. Will replace a pre-existing service for that type.\n *\n * @param entityCollectionServices - Array of EntityCollectionServices to register\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "abstract registerEntityCollectionServices(entityCollectionServices: "
            },
            {
              "kind": "Reference",
              "text": "EntityCollectionService",
              "canonicalReference": "@ngrx/data!EntityCollectionService:interface"
            },
            { "kind": "Content", "text": "<any>[]" },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 4, "endIndex": 5 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "entityCollectionServices",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 3 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": true,
          "name": "registerEntityCollectionServices",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Register entity services for several entity types at once. Will replace a pre-existing service for that type.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entityCollectionServices",
                "description": "Array of EntityCollectionServices to register\n"
              }
            ]
          }
        },
        {
          "kind": "Method",
          "canonicalReference": "@ngrx/data!EntityServices#registerEntityCollectionServices:member(2)",
          "docComment": "/**\n * Register entity services for several entity types at once. Will replace a pre-existing service for that type.\n *\n * @param entityCollectionServiceMap - Map of service-name to entity-collection-service\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "abstract registerEntityCollectionServices(entityCollectionServiceMap: "
            },
            {
              "kind": "Reference",
              "text": "EntityCollectionServiceMap",
              "canonicalReference": "@ngrx/data!EntityCollectionServiceMap:interface"
            },
            { "kind": "Content", "text": "): " },
            { "kind": "Content", "text": "void" },
            { "kind": "Content", "text": ";" }
          ],
          "isStatic": false,
          "returnTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "entityCollectionServiceMap",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            }
          ],
          "isOptional": false,
          "isAbstract": true,
          "name": "registerEntityCollectionServices",
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Register entity services for several entity types at once. Will replace a pre-existing service for that type.\n\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": [
              {
                "name": "entityCollectionServiceMap",
                "description": "Map of service-name to entity-collection-service\n"
              }
            ]
          }
        }
      ],
      "implementsTokenRanges": [],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Class-Interface for EntityCache and EntityCollection services. Serves as an Angular provider token for this service class. Includes a registry of EntityCollectionServices for all entity types. Creates a new default EntityCollectionService for any entity type not in the registry. Optionally register specialized EntityCollectionServices for individual types\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": []
      }
    }
  ]
}
