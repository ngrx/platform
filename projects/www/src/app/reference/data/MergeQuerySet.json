{
  "name": "MergeQuerySet",
  "canonicalReference": "@ngrx/data!MergeQuerySet:class",
  "kind": "Class",
  "fileUrlPath": "../../dist/modules/data/src/actions/entity-cache-action.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Class",
      "canonicalReference": "@ngrx/data!MergeQuerySet:class",
      "docComment": "/**\n * Create entity cache action that merges entities from a query result that returned entities from multiple collections. Corresponding entity cache reducer should add and update all collections at the same time, before any selectors$ observables emit.\n *\n * @param querySet - The result of the query in the form of a map of entity collections. These are the entity data to merge into the respective collections.\n *\n * @param mergeStrategy - How to merge a queried entity when it is already in the collection. The default is MergeStrategy.PreserveChanges\n *\n * @param tag - Optional tag to identify the operation from the app perspective.\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare class MergeQuerySet implements "
        },
        {
          "kind": "Reference",
          "text": "Action",
          "canonicalReference": "@ngrx/store!Action:interface"
        },
        { "kind": "Content", "text": " " }
      ],
      "fileUrlPath": "../../dist/modules/data/src/actions/entity-cache-action.d.ts",
      "releaseTag": "Public",
      "isAbstract": false,
      "name": "MergeQuerySet",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Constructor",
          "canonicalReference": "@ngrx/data!MergeQuerySet:constructor(1)",
          "docComment": "/**\n * Constructs a new instance of the `MergeQuerySet` class\n */\n",
          "excerptTokens": [
            { "kind": "Content", "text": "constructor(querySet: " },
            {
              "kind": "Reference",
              "text": "EntityCacheQuerySet",
              "canonicalReference": "@ngrx/data!EntityCacheQuerySet:interface"
            },
            { "kind": "Content", "text": ", mergeStrategy?: " },
            {
              "kind": "Reference",
              "text": "MergeStrategy",
              "canonicalReference": "@ngrx/data!MergeStrategy:enum"
            },
            { "kind": "Content", "text": ", tag?: " },
            { "kind": "Content", "text": "string" },
            { "kind": "Content", "text": ");" }
          ],
          "releaseTag": "Public",
          "isProtected": false,
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "querySet",
              "parameterTypeTokenRange": { "startIndex": 1, "endIndex": 2 },
              "isOptional": false
            },
            {
              "parameterName": "mergeStrategy",
              "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
              "isOptional": true
            },
            {
              "parameterName": "tag",
              "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
              "isOptional": true
            }
          ],
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "Constructs a new instance of the `MergeQuerySet` class\n",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!MergeQuerySet#payload:member",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "readonly payload: " },
            { "kind": "Content", "text": "{\n        querySet: " },
            {
              "kind": "Reference",
              "text": "EntityCacheQuerySet",
              "canonicalReference": "@ngrx/data!EntityCacheQuerySet:interface"
            },
            { "kind": "Content", "text": ";\n        mergeStrategy?: " },
            {
              "kind": "Reference",
              "text": "MergeStrategy",
              "canonicalReference": "@ngrx/data!MergeStrategy:enum"
            },
            { "kind": "Content", "text": ";\n        tag?: string;\n    }" },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "payload",
          "propertyTypeTokenRange": { "startIndex": 1, "endIndex": 6 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        },
        {
          "kind": "Property",
          "canonicalReference": "@ngrx/data!MergeQuerySet#type:member",
          "docComment": "",
          "excerptTokens": [
            { "kind": "Content", "text": "readonly type = " },
            {
              "kind": "Reference",
              "text": "EntityCacheAction.MERGE_QUERY_SET",
              "canonicalReference": "@ngrx/data!EntityCacheAction.MERGE_QUERY_SET:member"
            },
            { "kind": "Content", "text": ";" }
          ],
          "isReadonly": true,
          "isOptional": false,
          "releaseTag": "Public",
          "name": "type",
          "propertyTypeTokenRange": { "startIndex": 0, "endIndex": 0 },
          "initializerTokenRange": { "startIndex": 1, "endIndex": 2 },
          "isStatic": false,
          "isProtected": false,
          "isAbstract": false,
          "docs": {
            "modifiers": {
              "isInternal": false,
              "isPublic": false,
              "isAlpha": false,
              "isBeta": false,
              "isOverride": false,
              "isExperimental": false
            },
            "summary": "",
            "usageNotes": "",
            "remarks": "",
            "deprecated": "",
            "returns": "",
            "see": [],
            "params": []
          }
        }
      ],
      "implementsTokenRanges": [{ "startIndex": 1, "endIndex": 2 }],
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "Create entity cache action that merges entities from a query result that returned entities from multiple collections. Corresponding entity cache reducer should add and update all collections at the same time, before any selectors$ observables emit.\n\n",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [
          {
            "name": "querySet",
            "description": "The result of the query in the form of a map of entity collections. These are the entity data to merge into the respective collections.\n\n"
          },
          {
            "name": "mergeStrategy",
            "description": "How to merge a queried entity when it is already in the collection. The default is MergeStrategy.PreserveChanges\n\n"
          },
          {
            "name": "tag",
            "description": "Optional tag to identify the operation from the app perspective.\n"
          }
        ]
      }
    }
  ]
}
