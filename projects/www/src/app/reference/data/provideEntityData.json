{"name":"provideEntityData","canonicalReference":"@ngrx/data!provideEntityData:function","kind":"Function","fileUrlPath":"../../dist/modules/data/src/provide-entity-data.d.ts","isDeprecated":false,"members":[{"kind":"Function","canonicalReference":"@ngrx/data!provideEntityData:function(1)","docComment":"/**\n * Sets up base entity data providers with entity config. This function should to be used at the root level.\n *\n * @usageNotes\n *\n * ### Providing entity data with effects\n *\n * When used with `withEffects` feature, the `provideEntityData` function is an alternative to `EntityDataModule.forRoot`\n * ```ts\n * import { provideStore } from '@ngrx/store';\n * import { provideEffects } from '@ngrx/effects';\n * import {\n *   EntityMetadataMap,\n *   provideEntityData,\n *   withEffects,\n * } from '@ngrx/data';\n *\n * const entityMetadata: EntityMetadataMap = {\n *   Hero: {},\n *   Villain: {},\n * };\n * const pluralNames = { Hero: 'Heroes' };\n *\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStore(),\n *     provideEffects(),\n *     provideEntityData({ entityMetadata, pluralNames }, withEffects()),\n *   ],\n * });\n * ```\n *\n * ### Providing entity data without effects\n *\n * When used without `withEffects` feature, the `provideEntityData` function is an alternative to `EntityDataModuleWithoutEffects.forRoot`.\n * ```ts\n * import { provideStore } from '@ngrx/store';\n * import { EntityMetadataMap, provideEntityData } from '@ngrx/data';\n *\n * const entityMetadata: EntityMetadataMap = {\n *   Musician: {},\n *   Song: {},\n * };\n *\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStore(),\n *     provideEntityData({ entityMetadata }),\n *   ],\n * });\n * ```\n *\n */\n","excerptTokens":[{"kind":"Content","text":"export declare function provideEntityData(config: "},{"kind":"Reference","text":"EntityDataModuleConfig","canonicalReference":"@ngrx/data!EntityDataModuleConfig:interface"},{"kind":"Content","text":", ...features: "},{"kind":"Reference","text":"EntityDataFeature","canonicalReference":"@ngrx/data!~EntityDataFeature:interface"},{"kind":"Content","text":"[]"},{"kind":"Content","text":"): "},{"kind":"Reference","text":"EnvironmentProviders","canonicalReference":"@angular/core!EnvironmentProviders:type"},{"kind":"Content","text":";"}],"fileUrlPath":"../../dist/modules/data/src/provide-entity-data.d.ts","returnTypeTokenRange":{"startIndex":6,"endIndex":7},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"config","parameterTypeTokenRange":{"startIndex":1,"endIndex":2},"isOptional":false},{"parameterName":"features","parameterTypeTokenRange":{"startIndex":3,"endIndex":5},"isOptional":false}],"name":"provideEntityData","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":"Sets up base entity data providers with entity config. This function should to be used at the root level.\n\n","usageNotes":"\n\n### Providing entity data with effects\n\nWhen used with `withEffects` feature, the `provideEntityData` function is an alternative to `EntityDataModule.forRoot`\n```ts\nimport { provideStore } from '@ngrx/store';\nimport { provideEffects } from '@ngrx/effects';\nimport {\n  EntityMetadataMap,\n  provideEntityData,\n  withEffects,\n} from '@ngrx/data';\n\nconst entityMetadata: EntityMetadataMap = {\n  Hero: {},\n  Villain: {},\n};\nconst pluralNames = { Hero: 'Heroes' };\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideStore(),\n    provideEffects(),\n    provideEntityData({ entityMetadata, pluralNames }, withEffects()),\n  ],\n});\n```\n\n### Providing entity data without effects\n\nWhen used without `withEffects` feature, the `provideEntityData` function is an alternative to `EntityDataModuleWithoutEffects.forRoot`.\n```ts\nimport { provideStore } from '@ngrx/store';\nimport { EntityMetadataMap, provideEntityData } from '@ngrx/data';\n\nconst entityMetadata: EntityMetadataMap = {\n  Musician: {},\n  Song: {},\n};\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    provideStore(),\n    provideEntityData({ entityMetadata }),\n  ],\n});\n```\n\n","remarks":"","deprecated":"","returns":"","see":[],"params":[]}}]}