{
  "name": "createAction",
  "canonicalReference": "@ngrx/store!createAction:function",
  "kind": "Function",
  "fileUrlPath": "../../dist/modules/store/src/action_creator.d.ts",
  "isDeprecated": false,
  "members": [
    {
      "kind": "Function",
      "canonicalReference": "@ngrx/store!createAction:function(1)",
      "docComment": "/**\n * @description Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface with no additional metadata.\n *\n * @param type - Describes the action that will be dispatched\n *\n * @usageNotes\n *\n * Declaring an action creator:\n * ```ts\n * export const increment = createAction('[Counter] Increment');\n * ```\n *\n * Dispatching an action:\n * ```ts\n * store.dispatch(increment());\n * ```\n *\n * Referencing the action in a reducer:\n * ```ts\n * on(CounterActions.increment, (state) => ({ ...state, count: state.count + 1 }))\n * ```\n *\n * Referencing the action in an effect:\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(CounterActions.increment),\n *     // ...\n *   )\n * );\n * ```\n *\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function createAction<T extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ">(type: " },
        { "kind": "Content", "text": "T" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "ActionCreator",
          "canonicalReference": "@ngrx/store!ActionCreator:type"
        },
        { "kind": "Content", "text": "<T, () => " },
        {
          "kind": "Reference",
          "text": "Action",
          "canonicalReference": "@ngrx/store!Action:interface"
        },
        { "kind": "Content", "text": "<T>>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../../dist/modules/store/src/action_creator.d.ts",
      "returnTypeTokenRange": { "startIndex": 5, "endIndex": 9 },
      "releaseTag": "Public",
      "overloadIndex": 1,
      "parameters": [
        {
          "parameterName": "type",
          "parameterTypeTokenRange": { "startIndex": 3, "endIndex": 4 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "createAction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": " Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface with no additional metadata.\n\n",
        "usageNotes": "\n\nDeclaring an action creator:\n```ts\nexport const increment = createAction('[Counter] Increment');\n```\n\nDispatching an action:\n```ts\nstore.dispatch(increment());\n```\n\nReferencing the action in a reducer:\n```ts\non(CounterActions.increment, (state) => ({ ...state, count: state.count + 1 }))\n```\n\nReferencing the action in an effect:\n```ts\neffectName$ = createEffect(\n  () => this.actions$.pipe(\n    ofType(CounterActions.increment),\n    // ...\n  )\n);\n```\n\n",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [
          {
            "name": "type",
            "description": "Describes the action that will be dispatched\n\n"
          }
        ]
      }
    },
    {
      "kind": "Function",
      "canonicalReference": "@ngrx/store!createAction:function(2)",
      "docComment": "/**\n * @description Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface with metadata provided by the `props` or `emptyProps` functions.\n *\n * @param type - Describes the action that will be dispatched\n *\n * @usageNotes\n *\n * Declaring an action creator:\n * ```ts\n * export const loginSuccess = createAction(\n *   '[Auth/API] Login Success',\n *   props<{ user: User }>()\n * );\n * ```\n *\n * Dispatching an action:\n * ```ts\n * store.dispatch(loginSuccess({ user: newUser }));\n * ```\n *\n * Referencing the action in a reducer:\n * ```ts\n * on(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n * ```\n *\n * Referencing the action in an effect:\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(AuthApiActions.loginSuccess),\n *     // ...\n *   )\n * );\n * ```\n *\n */\n",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function createAction<T extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", P extends " },
        { "kind": "Content", "text": "object" },
        { "kind": "Content", "text": ">(type: " },
        { "kind": "Content", "text": "T" },
        { "kind": "Content", "text": ", config: " },
        {
          "kind": "Reference",
          "text": "ActionCreatorProps",
          "canonicalReference": "@ngrx/store!ActionCreatorProps:interface"
        },
        { "kind": "Content", "text": "<P> & " },
        {
          "kind": "Reference",
          "text": "NotAllowedCheck",
          "canonicalReference": "@ngrx/store!NotAllowedCheck:type"
        },
        { "kind": "Content", "text": "<P>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "ActionCreator",
          "canonicalReference": "@ngrx/store!ActionCreator:type"
        },
        { "kind": "Content", "text": "<T, (props: P & " },
        {
          "kind": "Reference",
          "text": "NotAllowedCheck",
          "canonicalReference": "@ngrx/store!NotAllowedCheck:type"
        },
        { "kind": "Content", "text": "<P>) => P & " },
        {
          "kind": "Reference",
          "text": "Action",
          "canonicalReference": "@ngrx/store!Action:interface"
        },
        { "kind": "Content", "text": "<T>>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../../dist/modules/store/src/action_creator.d.ts",
      "returnTypeTokenRange": { "startIndex": 12, "endIndex": 18 },
      "releaseTag": "Public",
      "overloadIndex": 2,
      "parameters": [
        {
          "parameterName": "type",
          "parameterTypeTokenRange": { "startIndex": 5, "endIndex": 6 },
          "isOptional": false
        },
        {
          "parameterName": "config",
          "parameterTypeTokenRange": { "startIndex": 7, "endIndex": 11 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "P",
          "constraintTokenRange": { "startIndex": 3, "endIndex": 4 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "createAction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": " Creates a configured `Creator` function that, when called, returns an object in the shape of the `Action` interface with metadata provided by the `props` or `emptyProps` functions.\n\n",
        "usageNotes": "\n\nDeclaring an action creator:\n```ts\nexport const loginSuccess = createAction(\n  '[Auth/API] Login Success',\n  props<{ user: User }>()\n);\n```\n\nDispatching an action:\n```ts\nstore.dispatch(loginSuccess({ user: newUser }));\n```\n\nReferencing the action in a reducer:\n```ts\non(AuthApiActions.loginSuccess, (state, { user }) => ({ ...state, user }))\n```\n\nReferencing the action in an effect:\n```ts\neffectName$ = createEffect(\n  () => this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess),\n    // ...\n  )\n);\n```\n\n",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": [
          {
            "name": "type",
            "description": "Describes the action that will be dispatched\n\n"
          }
        ]
      }
    },
    {
      "kind": "Function",
      "canonicalReference": "@ngrx/store!createAction:function(3)",
      "docComment": "",
      "excerptTokens": [
        {
          "kind": "Content",
          "text": "export declare function createAction<T extends "
        },
        { "kind": "Content", "text": "string" },
        { "kind": "Content", "text": ", P extends " },
        { "kind": "Content", "text": "any[]" },
        { "kind": "Content", "text": ", R extends " },
        { "kind": "Content", "text": "object" },
        { "kind": "Content", "text": ">(type: " },
        { "kind": "Content", "text": "T" },
        { "kind": "Content", "text": ", creator: " },
        {
          "kind": "Reference",
          "text": "Creator",
          "canonicalReference": "@ngrx/store!Creator:type"
        },
        { "kind": "Content", "text": "<P, R & " },
        {
          "kind": "Reference",
          "text": "NotAllowedCheck",
          "canonicalReference": "@ngrx/store!NotAllowedCheck:type"
        },
        { "kind": "Content", "text": "<R>>" },
        { "kind": "Content", "text": "): " },
        {
          "kind": "Reference",
          "text": "FunctionWithParametersType",
          "canonicalReference": "@ngrx/store!FunctionWithParametersType:type"
        },
        { "kind": "Content", "text": "<P, R & " },
        {
          "kind": "Reference",
          "text": "Action",
          "canonicalReference": "@ngrx/store!Action:interface"
        },
        { "kind": "Content", "text": "<T>> & " },
        {
          "kind": "Reference",
          "text": "Action",
          "canonicalReference": "@ngrx/store!Action:interface"
        },
        { "kind": "Content", "text": "<T>" },
        { "kind": "Content", "text": ";" }
      ],
      "fileUrlPath": "../../dist/modules/store/src/action_creator.d.ts",
      "returnTypeTokenRange": { "startIndex": 14, "endIndex": 20 },
      "releaseTag": "Public",
      "overloadIndex": 3,
      "parameters": [
        {
          "parameterName": "type",
          "parameterTypeTokenRange": { "startIndex": 7, "endIndex": 8 },
          "isOptional": false
        },
        {
          "parameterName": "creator",
          "parameterTypeTokenRange": { "startIndex": 9, "endIndex": 13 },
          "isOptional": false
        }
      ],
      "typeParameters": [
        {
          "typeParameterName": "T",
          "constraintTokenRange": { "startIndex": 1, "endIndex": 2 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "P",
          "constraintTokenRange": { "startIndex": 3, "endIndex": 4 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        },
        {
          "typeParameterName": "R",
          "constraintTokenRange": { "startIndex": 5, "endIndex": 6 },
          "defaultTypeTokenRange": { "startIndex": 0, "endIndex": 0 }
        }
      ],
      "name": "createAction",
      "docs": {
        "modifiers": {
          "isInternal": false,
          "isPublic": false,
          "isAlpha": false,
          "isBeta": false,
          "isOverride": false,
          "isExperimental": false
        },
        "summary": "",
        "usageNotes": "",
        "remarks": "",
        "deprecated": "",
        "returns": "",
        "see": [],
        "params": []
      }
    }
  ]
}
