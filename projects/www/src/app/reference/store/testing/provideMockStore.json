{"name":"provideMockStore","canonicalReference":"@ngrx/store/testing!provideMockStore:function","kind":"Function","fileUrlPath":"../../dist/modules/store/testing/testing.d.ts","isDeprecated":false,"members":[{"kind":"Function","canonicalReference":"@ngrx/store/testing!provideMockStore:function(1)","docComment":"/**\n * @description Creates mock store providers.\n *\n * @param config - `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens. By default, `initialState` and `selectors` are not defined.\n *\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n *\n */\n","excerptTokens":[{"kind":"Content","text":"export declare function provideMockStore<T = "},{"kind":"Content","text":"any"},{"kind":"Content","text":">(config?: "},{"kind":"Reference","text":"MockStoreConfig","canonicalReference":"@ngrx/store/testing!MockStoreConfig:interface"},{"kind":"Content","text":"<T>"},{"kind":"Content","text":"): "},{"kind":"Content","text":"("},{"kind":"Reference","text":"ValueProvider","canonicalReference":"@angular/core!ValueProvider:interface"},{"kind":"Content","text":" | "},{"kind":"Reference","text":"ExistingProvider","canonicalReference":"@angular/core!ExistingProvider:interface"},{"kind":"Content","text":" | "},{"kind":"Reference","text":"FactoryProvider","canonicalReference":"@angular/core!FactoryProvider:interface"},{"kind":"Content","text":")[]"},{"kind":"Content","text":";"}],"fileUrlPath":"../../dist/modules/store/testing/testing.d.ts","returnTypeTokenRange":{"startIndex":6,"endIndex":13},"releaseTag":"Public","overloadIndex":1,"parameters":[{"parameterName":"config","parameterTypeTokenRange":{"startIndex":3,"endIndex":5},"isOptional":true}],"typeParameters":[{"typeParameterName":"T","constraintTokenRange":{"startIndex":0,"endIndex":0},"defaultTypeTokenRange":{"startIndex":1,"endIndex":2}}],"name":"provideMockStore","docs":{"modifiers":{"isInternal":false,"isPublic":false,"isAlpha":false,"isBeta":false,"isOverride":false,"isExperimental":false},"summary":" Creates mock store providers.\n\n","usageNotes":"\n\n**With `TestBed.configureTestingModule`**\n```typescript\ndescribe('Books Component', () => {\n  let store: MockStore;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideMockStore({\n          initialState: { books: { entities: [] } },\n          selectors: [\n            { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n            { selector: selectVisibleBooks, value: ['Book 1'] },\n          ],\n        }),\n      ],\n    });\n\n    store = TestBed.inject(MockStore);\n  });\n});\n```\n\n**With `Injector.create`**\n```typescript\ndescribe('Counter Component', () => {\n  let injector: Injector;\n  let store: MockStore;\n\n  beforeEach(() => {\n    injector = Injector.create({\n      providers: [\n        provideMockStore({ initialState: { counter: 0 } }),\n      ],\n    });\n    store = injector.get(MockStore);\n  });\n});\n```\n\n","remarks":"","deprecated":"","returns":" Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n\n","see":[],"params":[{"name":"config","description":"`MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens. By default, `initialState` and `selectors` are not defined.\n\n"}]}}]}