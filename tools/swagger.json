{
	"openapi": "3.0.1",
	"info": {
		"title": "RIS-Maps API",
		"description": "Central API integration layer for RIS-Maps related data like geoserver or vista.\nDue to json response protocol usage, parsers must be able\nto ignore not yet defined objects and attributes which can be added without version increment\nand consider that the order of these elements is not guaranteed.\n",
		"contact": {
			"name": "RI-Maps Team",
			"email": "rimaps@deutschebahn.com"
		},
		"version": "0.7.169"
	},
	"servers": [
		{
			"url": "https://maps-test.reisenden.info/rimapsapi/0.7",
			"description": "(Internet)"
		},
		{
			"url": "https://rimaps-tst.pz-k8s-test.comp.db.de/rimapsapi/0.7",
			"description": "(Intranet)"
		}
	],
	"security": [
		{
			"basic": []
		}
	],
	"tags": [
		{
			"name": "Platform",
			"description": "information for platforms"
		},
		{
			"name": "Routing",
			"description": "indoor routing with real lengths over multiple levels"
		},
		{
			"name": "Rrt",
			"description": "points regarding rail replacement transport"
		},
		{
			"name": "KPI",
			"description": "Information about some KPIs of the RIS Maps API"
		},
		{
			"name": "Metro",
			"description": "Metro network of station and line shapes of several traffic associations operating in german cities."
		},
		{
			"name": "Railway",
			"description": "railway arrangement between stations"
		},
		{
			"name": "Map",
			"description": "background maps, station maps etc."
		},
		{
			"name": "StationList",
			"description": "information for stations"
		},
		{
			"name": "Wagon",
			"description": "wagon information like seats, shapes etc."
		},
		{
			"name": "Metro-KPI",
			"description": "Information about some KPIs of the RIS Maps Metro API"
		},
		{
			"name": "Poi",
			"description": "indoor points of interest regarding stations"
		}
	],
	"paths": {
		"/wagon/all": {
			"get": {
				"tags": [
					"Wagon"
				],
				"description": "Returns all wagons and their seats, interiors etc. for all types of wagons.",
				"operationId": "wagon",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WagonResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/wagon": {
			"get": {
				"tags": [
					"Wagon"
				],
				"description": "Returns messages for all invalid wagons.",
				"operationId": "wagonsValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/wagon/opening": {
			"get": {
				"tags": [
					"Wagon"
				],
				"description": "Returns messages for all invalid openings of wagon.",
				"operationId": "openingsValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/wagon/interior": {
			"get": {
				"tags": [
					"Wagon"
				],
				"description": "Returns messages for all invalid interiors of wagon.",
				"operationId": "interiorsValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/wagon/area": {
			"get": {
				"tags": [
					"Wagon"
				],
				"description": "Returns messages for all invalid areas of wagon.",
				"operationId": "areasValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/station/rrt/all": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns messages for all invalid rail replacement transport points.",
				"operationId": "rrtsValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/station/poi/indoor/all": {
			"get": {
				"tags": [
					"Poi"
				],
				"description": "Returns messages for all invalid poi of requested provider.",
				"operationId": "poisValidateByProvider",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of poi provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/PoiProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of poi provider.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/station/platform/sector/all": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "Returns messages for all invalid platform sections.",
				"operationId": "platformSectorsValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/station/platform/info/all": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "Returns messages for all invalid platform infos.",
				"operationId": "platformInfosValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/station/platform/all": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "Returns messages for all invalid platforms.",
				"operationId": "platformsValidate",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/station/list/all": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "Returns messages for all invalid stations of requested provider.",
				"operationId": "stationsValidateByProvider",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of station provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station provider.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/validate/railway/all": {
			"get": {
				"tags": [
					"Railway"
				],
				"description": "Returns messages for all invalid railway arrangements.",
				"operationId": "railwaysValidateOptionalByNumber",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProviderValidatorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/byzoneid": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of ail replacement transport points matching the provided zone id.",
				"operationId": "rrtsByZoneID",
				"parameters": [
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0767"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/byzoneid.geojson": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of ail replacement transport points matching the provided zone id (geojson).",
				"operationId": "rrtGeosByZoneID",
				"parameters": [
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "0767"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponseGeo"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/byrl100": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of rail replacement transport points matching the provided rl100.",
				"operationId": "rrtsByRl100",
				"parameters": [
					{
						"name": "rl100",
						"in": "query",
						"description": "Rl100 to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "KB"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/byrl100.geojson": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of rail replacement transport points matching the provided rl100 (geojson).",
				"operationId": "rrtGeosByRl100",
				"parameters": [
					{
						"name": "rl100",
						"in": "query",
						"description": "Rl100 to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "KB"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponseGeo"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/byevanumber": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of ail replacement transport points matching the provided eva number.",
				"operationId": "rrtsByEva",
				"parameters": [
					{
						"name": "evaNumber",
						"in": "query",
						"description": "Eva number to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 8000044
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/byevanumber.geojson": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of ail replacement transport points matching the provided eva number (geojson).",
				"operationId": "rrtGeosByEva",
				"parameters": [
					{
						"name": "evaNumber",
						"in": "query",
						"description": "Eva number to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 8000044
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponseGeo"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/bydhid": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of ail replacement transport points matching the provided dhid.",
				"operationId": "rrtsByDHID",
				"parameters": [
					{
						"name": "DHID",
						"in": "query",
						"description": "DHID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "de:05314:61101"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/bydhid.geojson": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns a list of ail replacement transport points matching the provided dhid (geojson).",
				"operationId": "rrtGeosByDHID",
				"parameters": [
					{
						"name": "DHID",
						"in": "query",
						"description": "DHID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "de:05314:61101"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponseGeo"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/all": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns all rail replacement transport points.",
				"operationId": "rrts",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/rrt/all.geojson": {
			"get": {
				"tags": [
					"Rrt"
				],
				"description": "Returns all rail replacement transport points (geojson).",
				"operationId": "rrtGeos",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RrtResponseGeo"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/routing/indoor/byposition": {
			"get": {
				"tags": [
					"Routing"
				],
				"description": "Returns indoor routing from source to destination.",
				"operationId": "indoorRoutingByPosition",
				"parameters": [
					{
						"name": "zoneID",
						"in": "query",
						"description": "zoneID we want to do routing in",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					},
					{
						"name": "fromLevel",
						"in": "query",
						"description": "level we want to start from",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						},
						"example": "GROUND_FLOOR"
					},
					{
						"name": "fromLon",
						"in": "query",
						"description": "Longitutde we want to start from",
						"required": true,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": 8.661161960000001
					},
					{
						"name": "fromLat",
						"in": "query",
						"description": "Latitude we want to start from",
						"required": true,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": 50.10611873
					},
					{
						"name": "toLevel",
						"in": "query",
						"description": "level we want to arrive at",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						},
						"example": "BASEMENT_FLOOR_4"
					},
					{
						"name": "toLon",
						"in": "query",
						"description": "Longitutde we want to arrive at",
						"required": true,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": 8.661161960000001
					},
					{
						"name": "toLat",
						"in": "query",
						"description": "Latitude we want to arrive at",
						"required": true,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": 50.10611873
					},
					{
						"name": "handicapped",
						"in": "query",
						"description": "routing for handicapped people without stairs and escalators",
						"required": true,
						"schema": {
							"type": "boolean"
						},
						"example": false
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RouteIndoorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/routing/indoor/byplatform": {
			"get": {
				"tags": [
					"Routing"
				],
				"description": "Returns indoor routing from source platform to destination platform.",
				"operationId": "indoorRoutingByPlatform",
				"parameters": [
					{
						"name": "zoneID",
						"in": "query",
						"description": "zoneID we want to do routing in",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					},
					{
						"name": "fromTrack",
						"in": "query",
						"description": "track to start from",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fromSector",
						"in": "query",
						"description": "sector to start from",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "toTrack",
						"in": "query",
						"description": "track to arrive at",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "toSector",
						"in": "query",
						"description": "sector to arrive at",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "handicapped",
						"in": "query",
						"description": "routing for handicapped people without stairs and escalators",
						"required": true,
						"schema": {
							"type": "boolean"
						},
						"example": false
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RouteIndoorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/poi/indoor/{provider}/byzoneid": {
			"get": {
				"tags": [
					"Poi"
				],
				"description": "Returns a list of indoor pois for provided provider and zone id.",
				"operationId": "poisIndoorProviderByZoneID",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/PoiProviderEnum"
						}
					},
					{
						"name": "zoneID",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Zone ID of station.",
							"example": "1866"
						}
					},
					{
						"name": "filterGroup",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/filterGroup"
						}
					},
					{
						"name": "filterType",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/filterType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoiIndoorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/poi/indoor/byzoneid": {
			"get": {
				"tags": [
					"Poi"
				],
				"description": "DEPRECATED: Returns a list of indoor pois for provided zone id.",
				"operationId": "poisIndoorByZoneID",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of station provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/PoiProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "zoneID",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Zone ID of station.",
							"example": "1866"
						}
					},
					{
						"name": "filterGroup",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/filterGroup"
						}
					},
					{
						"name": "filterType",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/filterType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PoiIndoorResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/platform/{provider}/byzoneid": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "Returns a list of platforms for a particular zoneid.",
				"operationId": "platformsProviderByZoneID",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/PlatformProviderEnum"
						}
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/platform/{provider}/byposition": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "Returns the position information of a platform for given zoneid, track and sector.",
				"operationId": "platformProviderPosition",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/PlatformProviderEnum"
						}
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					},
					{
						"name": "track",
						"in": "query",
						"description": "Name of track to get position for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 12
					},
					{
						"name": "sector",
						"in": "query",
						"description": "Name of sector to get position for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "A"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformPositionResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/platform/byzoneid": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "DEPRECATED: Returns a list of platforms for a particular zoneid.",
				"operationId": "platformsByZoneID",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of poi provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/PlatformProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/platform/byposition": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "DEPRECATED: Returns the position information of a platform for given zoneid, track and sector.",
				"operationId": "platformPosition",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of poi provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/PlatformProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					},
					{
						"name": "track",
						"in": "query",
						"description": "Name of track to get position for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 12
					},
					{
						"name": "sector",
						"in": "query",
						"description": "Name of sector to get position for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "A"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformPositionResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/platform/DB/distance/matrix/byzoneid": {
			"get": {
				"tags": [
					"Platform"
				],
				"description": "Returns the platform distance matrix between tracks or sectors for given zoneid ",
				"operationId": "platformDistanceMatrix",
				"parameters": [
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformDistanceMatrixResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/{provider}/byzoneid": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "Returns a list of stations matching the provided zone id.",
				"operationId": "stationsProviderByZoneID",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						}
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/{provider}/byrl100": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "Returns a list of stations matching the provided rl100.",
				"operationId": "stationsProviderByRl100",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						}
					},
					{
						"name": "rl100",
						"in": "query",
						"description": "Rl100 to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "KB"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/{provider}/byevanumber": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "Returns a list of stations matching the provided eva number.",
				"operationId": "stationsProviderByEva",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						}
					},
					{
						"name": "evaNumber",
						"in": "query",
						"description": "Eva number to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 8000105
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/{provider}/all": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "Returns all stations.",
				"operationId": "stationsProvider",
				"parameters": [
					{
						"name": "provider",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						}
					},
					{
						"name": "viewPort",
						"in": "query",
						"description": "ViewPort by given coordinates list as EPSG:4326.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "10.66624961,53.86544559,10.6725409,53.86938228"
					},
					{
						"name": "maxStations",
						"in": "query",
						"description": "maximum stations",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minCategoryDisplay",
						"in": "query",
						"description": "minimum priority (categoryDisplay)",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maxCategory",
						"in": "query",
						"description": "maximum importance (category)",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationCategoryEnum"
						}
					},
					{
						"name": "emptyGeometry",
						"in": "query",
						"description": "Station with empty geometry saves some data volume",
						"required": false,
						"schema": {
							"type": "boolean"
						},
						"example": false
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/byzoneid": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "DEPRECATED: Returns a list of stations matching the provided zone id.",
				"operationId": "stationsByZoneID",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of station provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "zoneID",
						"in": "query",
						"description": "Zone ID of station.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1866
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/byrl100": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "DEPRECATED: Returns a list of stations matching the provided rl100.",
				"operationId": "stationsByRl100",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of station provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "rl100",
						"in": "query",
						"description": "Rl100 to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "KB"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/byevanumber": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "DEPRECATED: Returns a list of stations matching the provided eva number.",
				"operationId": "stationsByEva",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of station provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "evaNumber",
						"in": "query",
						"description": "Eva number to search for.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 8000105
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/station/list/all": {
			"get": {
				"tags": [
					"StationList"
				],
				"description": "DEPRECATED: Returns all stations.",
				"operationId": "stations",
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Id of station provider.",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationProviderEnum"
						},
						"example": "DB"
					},
					{
						"name": "viewPort",
						"in": "query",
						"description": "ViewPort by given coordinates list as EPSG:4326.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "10.66624961,53.86544559,10.6725409,53.86938228"
					},
					{
						"name": "maxStations",
						"in": "query",
						"description": "maximum stations",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minCategoryDisplay",
						"in": "query",
						"description": "minimum priority (categoryDisplay)",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maxCategory",
						"in": "query",
						"description": "maximum importance (category)",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/StationCategoryEnum"
						}
					},
					{
						"name": "emptyGeometry",
						"in": "query",
						"description": "Station with empty geometry saves some data volume",
						"required": false,
						"schema": {
							"type": "boolean"
						},
						"example": false
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StationResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/railway/bynumber": {
			"get": {
				"tags": [
					"Railway"
				],
				"description": "Returns a line of railway arrangement between stations.",
				"operationId": "railwaysByNumber",
				"parameters": [
					{
						"name": "railwayNr",
						"in": "query",
						"description": "Railway Number.",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"example": 2630
					},
					{
						"name": "fromRl100",
						"in": "query",
						"description": "RL100 of start station.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "KK"
					},
					{
						"name": "toRl100",
						"in": "query",
						"description": "RL100 of destination station.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "KB"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RailwayResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/railway/bynumber.geojson": {
			"get": {
				"tags": [
					"Railway"
				],
				"description": "Returns a line of railway arrangement between stations (geojson).",
				"operationId": "railwaysByNumberGeo",
				"parameters": [
					{
						"name": "railwayNr",
						"in": "query",
						"description": "Railway Number.",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"example": 2630
					},
					{
						"name": "fromRl100",
						"in": "query",
						"description": "RL100 of start station.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "KK"
					},
					{
						"name": "toRl100",
						"in": "query",
						"description": "RL100 of destination station.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "KB"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RailwayResponseGeo"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/network": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns metro network related information i.g their stations and lines for applied region.",
				"operationId": "metroNetwork",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroNetworkResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/network/{transports}": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns metro network related information i.g their stations and lines for applied region and transport type.",
				"operationId": "metroNetworkTransport",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					},
					{
						"name": "transports",
						"in": "path",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/MetroTransportTypeEnum"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroNetworkResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/{id}": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns all metro disruptions of lines for applied region and disruption id.",
				"operationId": "metroDisruptionById",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "announcement",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"description": "Previous announcement filter to apply.",
							"example": "-1"
						}
					},
					{
						"name": "disruptionStatus",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/disruptionStatus"
						}
					},
					{
						"name": "announcementStatus",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/announcementStatus"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroDisruptionResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/masks": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns a list of requestable metro disruptions masks for all lines.",
				"operationId": "metroDisruptionMasks",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroDisruptionResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/masks/line/{line}": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns a list of requestable metro disruptions masks for a line.",
				"operationId": "metroDisruptionMasksByLine",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					},
					{
						"name": "line",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroDisruptionResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/mask/byId": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns the metro disruption mask with the requested id.",
				"operationId": "metroDisruptionMaskById",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Mask id"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/concept/all": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns all metro disruption concepts of lines for applied region.",
				"operationId": "metroDisruptionConceptAll",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroDisruptionConceptResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/cause": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns all possible metro disruptions causes of lines for applied region.",
				"operationId": "metroDisruptionCauseAll",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroDACauseResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/metro/{region}/disruption/all": {
			"get": {
				"tags": [
					"Metro"
				],
				"description": "Returns all metro disruptions of lines for applied region.",
				"operationId": "metroDisruptionAll",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					},
					{
						"name": "transportType",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/transportType"
						}
					},
					{
						"name": "line",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"description": "Line filter to apply.",
							"example": "S1"
						}
					},
					{
						"name": "announcement",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"description": "Previous announcement filter to apply.",
							"example": "-1"
						}
					},
					{
						"name": "disruptionStatus",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/disruptionStatus"
						}
					},
					{
						"name": "announcementStatus",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/announcementStatus"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroDisruptionResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/gsk/byid.pbf": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a vector tile.",
				"operationId": "stationGSKvectorbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "All station passenger vector tiles by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/x-protobuf": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/fasta/byid.pbf": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a vector tile.",
				"operationId": "stationFASTAvectorbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "All station fasta vector tiles by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/x-protobuf": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/OSM/{level}/{variant}/byid": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a tile.",
				"operationId": "stationOSMbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "Station (OSM) tile by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					},
					{
						"name": "level",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						}
					},
					{
						"name": "variant",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationOSMMapVariantEnum"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/OSM/{level}/{variant}/bybbox": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a tile of a OSM stations level with given variant (show specific pois and design).",
				"operationId": "stationOSMWmsbybbox",
				"parameters": [
					{
						"name": "BBOX",
						"in": "query",
						"description": "Map tile of a OSM station by given bbox coordinates list as EPSG:3857 for given level and variant.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "964253.1,6464890.9,964329.5,6464967.4"
					},
					{
						"name": "level",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						}
					},
					{
						"name": "variant",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationOSMMapVariantEnum"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/DB/{level}/{variant}/byid": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a tile.",
				"operationId": "stationDBbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "Station (DB) tile by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					},
					{
						"name": "level",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						}
					},
					{
						"name": "variant",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationDBMapVariantEnum"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/DB/{level}/{variant}/byid.pbf": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a vector tile.",
				"operationId": "stationDBvectorbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "Station (DB) vector tile by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					},
					{
						"name": "level",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						}
					},
					{
						"name": "variant",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationDBMapVariantEnum"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/x-protobuf": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/DB/{level}/{variant}/bybbox": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a tile of a DB stations level with given variant (show specific pois and design).",
				"operationId": "stationDBWmsbybbox",
				"parameters": [
					{
						"name": "BBOX",
						"in": "query",
						"description": "Map tile of a DB station by given bbox coordinates list as EPSG:3857 for given level and variant.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "964253.1,6464890.9,964329.5,6464967.4"
					},
					{
						"name": "level",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/LevelEnum"
						}
					},
					{
						"name": "variant",
						"in": "path",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/StationDBMapVariantEnum"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/station/DB/byid.pbf": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a vector tile.",
				"operationId": "stationDBALLvectorbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "All station (DB) vector tiles by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/x-protobuf": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/outdoor/byid": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a tile.",
				"operationId": "tilebyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "Map tile by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "7/68/41"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/outdoor/byid.pbf": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a vector tile.",
				"operationId": "vectorbyid",
				"parameters": [
					{
						"name": "tileID",
						"in": "query",
						"description": "Vector map tile by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/x-protobuf": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/outdoor/bybbox": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a OSM tile of germany.",
				"operationId": "germanyOSMWmsbybbox",
				"parameters": [
					{
						"name": "BBOX",
						"in": "query",
						"description": "Map tile by given bbox coordinates list as EPSG:3857.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "949882.9504998848,6805456.15782824,949921.1690140273,6805494.376342382"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"image/png": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/map/layer/byid.pbf": {
			"get": {
				"tags": [
					"Map"
				],
				"description": "Returns a vector tile of layer.",
				"operationId": "vectorLayerbyid",
				"parameters": [
					{
						"name": "layer",
						"in": "query",
						"description": "Vector tiles of an given layer.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "DBSTATIONS:DBSTATIONS_L0"
					},
					{
						"name": "tileID",
						"in": "query",
						"description": "Vector tiles of an given layer by given ids z/x/y coordinate root is up left.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "17/68543/44451"
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/x-protobuf": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "byte"
									}
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/kpi/{kpis}": {
			"get": {
				"tags": [
					"KPI"
				],
				"description": "Returns requested KPIs, given as comma separated list.",
				"operationId": "kpis",
				"parameters": [
					{
						"name": "kpis",
						"in": "path",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/KpiEnum"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/KpiResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/kpi/metro": {
			"get": {
				"tags": [
					"Metro-KPI"
				],
				"description": "Returns all metro related KPIs.",
				"operationId": "metroKpiResponses",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroKpiResponses"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/kpi/metro/{region}/{kpis}": {
			"get": {
				"tags": [
					"Metro-KPI"
				],
				"description": "Returns requested metro related KPIs for given region, given KPIs as comma separated list.",
				"operationId": "metroKpiResponse",
				"parameters": [
					{
						"name": "region",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"Munich",
								"Hamburg",
								"Berlin",
								"RhineMain",
								"Stuttgart"
							]
						}
					},
					{
						"name": "kpis",
						"in": "path",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/MetroKpiEnum"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetroKpiResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		},
		"/kpi/all": {
			"get": {
				"tags": [
					"KPI"
				],
				"description": "Returns all KPIs.",
				"operationId": "kpis_1",
				"responses": {
					"200": {
						"description": "Success, body is available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/KpiResponse"
								}
							}
						}
					},
					"204": {
						"description": "No Content, no body available"
					},
					"400": {
						"description": "Bad request"
					},
					"401": {
						"description": "Not authenticated as user"
					},
					"403": {
						"description": "Not authorized for using this service"
					},
					"404": {
						"description": "Requested url resource not found"
					},
					"410": {
						"description": "Resource gone, currently not configured"
					},
					"422": {
						"description": "Unprocessable request"
					},
					"500": {
						"description": "Internal server error, communication problems with backend service"
					},
					"502": {
						"description": "Erroneous response from requested backend service"
					},
					"503": {
						"description": "Service Unavailable response status from backend service"
					},
					"504": {
						"description": "Error requesting backend service"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Area": {
				"required": [
					"geometry",
					"level",
					"name",
					"type",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"level": {
						"$ref": "#/components/schemas/WagonLevelEnum"
					},
					"type": {
						"$ref": "#/components/schemas/AreaTypeEnum"
					}
				},
				"description": "Area for wagon interior."
			},
			"AreaTypeEnum": {
				"type": "string",
				"description": "Type of interior area.",
				"enum": [
					"FLOOR",
					"TECHNICS",
					"SEAT",
					"TRANSIT",
					"BAGGAGE",
					"RAMP",
					"STAIRS",
					"WINDOW",
					"DOOR"
				]
			},
			"Coordinate2D": {
				"required": [
					"lat",
					"lon"
				],
				"type": "object",
				"properties": {
					"lon": {
						"type": "number",
						"description": "Longitude position in reference system.",
						"format": "double"
					},
					"lat": {
						"type": "number",
						"description": "Latitude position in reference system.",
						"format": "double"
					}
				},
				"description": "2D Coordinate within geo reference system."
			},
			"Crs": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"name",
							"link"
						]
					},
					"properties": {
						"type": "object",
						"additionalProperties": {
							"type": "object"
						}
					}
				}
			},
			"Feature": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"properties": {
								"type": "object",
								"additionalProperties": {
									"type": "object"
								}
							},
							"geometry": {
								"$ref": "#/components/schemas/GeoJsonObject"
							},
							"id": {
								"type": "string"
							}
						}
					}
				]
			},
			"FeatureCollection": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"features": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Feature"
								}
							}
						}
					}
				]
			},
			"GeoJsonObject": {
				"required": [
					"type"
				],
				"type": "object",
				"properties": {
					"crs": {
						"$ref": "#/components/schemas/Crs"
					},
					"bbox": {
						"type": "array",
						"items": {
							"type": "number",
							"format": "double"
						}
					},
					"type": {
						"type": "string"
					}
				},
				"description": "Geometry",
				"discriminator": {
					"propertyName": "type"
				}
			},
			"GeometryCollection": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"geometries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/GeoJsonObject"
								}
							}
						}
					}
				]
			},
			"Interior": {
				"required": [
					"geometry",
					"level",
					"name",
					"type",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"level": {
						"$ref": "#/components/schemas/WagonLevelEnum"
					},
					"type": {
						"$ref": "#/components/schemas/InteriorTypeEnum"
					}
				},
				"description": "Wagon interior."
			},
			"InteriorTypeEnum": {
				"type": "string",
				"description": "Type of interior.",
				"enum": [
					"TABLE",
					"BAGGAGE",
					"STORAGE",
					"STANCE",
					"WORKSPACE",
					"COUNTER",
					"WC",
					"LAVATORY",
					"DINING_TABLE",
					"UNDEFINED"
				]
			},
			"LineString": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"coordinates": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/LngLatAlt"
								}
							}
						}
					}
				]
			},
			"LngLatAlt": {
				"type": "object",
				"properties": {
					"longitude": {
						"type": "number",
						"format": "double"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"altitude": {
						"type": "number",
						"format": "double"
					},
					"additionalElements": {
						"type": "array",
						"items": {
							"type": "number",
							"format": "double"
						}
					}
				}
			},
			"MultiLineString": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"coordinates": {
								"type": "array",
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LngLatAlt"
									}
								}
							}
						}
					}
				]
			},
			"MultiPoint": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"coordinates": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/LngLatAlt"
								}
							}
						}
					}
				]
			},
			"MultiPolygon": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"coordinates": {
								"type": "array",
								"items": {
									"type": "array",
									"items": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/LngLatAlt"
										}
									}
								}
							}
						}
					}
				]
			},
			"OrientationEnum": {
				"type": "string",
				"description": "Orientation forwards or backwards.",
				"enum": [
					"FORWARDS",
					"BACKWARDS",
					"UNDEFINED"
				]
			},
			"Point": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"coordinates": {
								"$ref": "#/components/schemas/LngLatAlt"
							}
						}
					}
				]
			},
			"Polygon": {
				"type": "object",
				"allOf": [
					{
						"$ref": "#/components/schemas/GeoJsonObject"
					},
					{
						"type": "object",
						"properties": {
							"coordinates": {
								"type": "array",
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LngLatAlt"
									}
								}
							}
						}
					}
				]
			},
			"Seat": {
				"required": [
					"area",
					"geometry",
					"level",
					"name",
					"orientation",
					"seatConstructionType",
					"seatType",
					"viewPort",
					"zone"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"number": {
						"type": "string",
						"description": "The number of the seat."
					},
					"level": {
						"$ref": "#/components/schemas/WagonLevelEnum"
					},
					"orientation": {
						"$ref": "#/components/schemas/OrientationEnum"
					},
					"seatClass": {
						"$ref": "#/components/schemas/SeatClassEnum"
					},
					"seatType": {
						"$ref": "#/components/schemas/SeatTypeEnum"
					},
					"seatConstructionType": {
						"$ref": "#/components/schemas/SeatConstructionTypeEnum"
					},
					"area": {
						"$ref": "#/components/schemas/SeatAreaEnum"
					},
					"zone": {
						"$ref": "#/components/schemas/SeatZoneEnum"
					},
					"aisle": {
						"type": "boolean",
						"description": "Indicates whether the seat is a an aisle seat."
					},
					"window": {
						"type": "boolean",
						"description": "Indicates whether the seat has a window view."
					},
					"powersocket": {
						"type": "boolean",
						"description": "Indicates whether the seat has a power socket."
					},
					"light": {
						"type": "boolean",
						"description": "Indicates whether the seat has a light."
					},
					"groupID": {
						"type": "string",
						"description": "The group the seat belongs to in order to reflect neighbours."
					}
				},
				"description": "Wagon seat."
			},
			"SeatAreaEnum": {
				"type": "string",
				"description": "Type of area the seat is placed in.",
				"enum": [
					"SALOON",
					"CABIN",
					"RESTAURANT",
					"UNDEFINED"
				]
			},
			"SeatClassEnum": {
				"type": "string",
				"description": "Seat first or economy class.",
				"enum": [
					"FIRST",
					"ECONOMY",
					"INAPPLICABLE"
				]
			},
			"SeatConstructionTypeEnum": {
				"type": "string",
				"description": "The construction type for a seat.",
				"enum": [
					"SINGLE",
					"DOUBLE",
					"GROUP",
					"UNDEFINED"
				]
			},
			"SeatTypeEnum": {
				"type": "string",
				"description": "Type of seat.",
				"enum": [
					"SEAT",
					"BAHN_COMFORT",
					"WHEELCHAIR",
					"FOLDING_SEAT",
					"BIKE"
				]
			},
			"SeatZoneEnum": {
				"type": "string",
				"description": "Type of zone for seat.",
				"enum": [
					"NONE",
					"MOBILE",
					"FAMILY",
					"SILENCE",
					"SPECIAL_USAGE"
				]
			},
			"ViewPort": {
				"required": [
					"bottomLeft",
					"topRight"
				],
				"type": "object",
				"properties": {
					"topRight": {
						"$ref": "#/components/schemas/Coordinate2D"
					},
					"bottomLeft": {
						"$ref": "#/components/schemas/Coordinate2D"
					}
				},
				"description": "Geo bounding box."
			},
			"Wagon": {
				"required": [
					"areas",
					"category",
					"geometry",
					"interiors",
					"layout",
					"length",
					"name",
					"orderNumbers",
					"orientation",
					"seats",
					"trainProduct",
					"trainType",
					"typeSeries",
					"viewPort",
					"wagonClass",
					"wagonID",
					"width"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"wagonID": {
						"type": "string",
						"description": "ID of wagon within train."
					},
					"trainProduct": {
						"$ref": "#/components/schemas/WagonProductEnum"
					},
					"trainType": {
						"type": "string",
						"description": "Type definition for train."
					},
					"typeSeries": {
						"type": "string",
						"description": "Type definition for train wagon."
					},
					"orderNumbers": {
						"type": "array",
						"description": "Order numbers the information is valid for.",
						"items": {
							"type": "integer",
							"description": "Order numbers the information is valid for.",
							"format": "int32"
						}
					},
					"layout": {
						"$ref": "#/components/schemas/WagonLayoutEnum"
					},
					"category": {
						"$ref": "#/components/schemas/WagonCategoryEnum"
					},
					"orientation": {
						"$ref": "#/components/schemas/OrientationEnum"
					},
					"wagonClass": {
						"$ref": "#/components/schemas/WagonClassEnum"
					},
					"width": {
						"type": "number",
						"description": "Width of wagon in cm.",
						"format": "double"
					},
					"length": {
						"type": "number",
						"description": "Length of wagon in cm.",
						"format": "double"
					},
					"seats": {
						"type": "array",
						"description": "List of all seats within wagon.",
						"items": {
							"$ref": "#/components/schemas/Seat"
						}
					},
					"interiors": {
						"type": "array",
						"description": "List of all interiors within wagon.",
						"items": {
							"$ref": "#/components/schemas/Interior"
						}
					},
					"areas": {
						"type": "array",
						"description": "List of all areas within wagon.",
						"items": {
							"$ref": "#/components/schemas/Area"
						}
					}
				},
				"description": "Wagon within train."
			},
			"WagonCategoryEnum": {
				"type": "string",
				"description": "Wagon type.",
				"enum": [
					"DININGCAR",
					"CONTROLCAR",
					"UNDEFINED"
				]
			},
			"WagonClassEnum": {
				"type": "string",
				"description": "Wagon class for seats. May be first, economy or both.",
				"enum": [
					"FIRST",
					"ECONOMY",
					"FIRST_AND_ECONOMY",
					"INAPPLICABLE"
				]
			},
			"WagonLayoutEnum": {
				"type": "string",
				"description": "Particular layout of wagon.",
				"enum": [
					"REDESIGN",
					"UNDEFINED"
				]
			},
			"WagonLevelEnum": {
				"type": "string",
				"description": "The level within the wagon.",
				"enum": [
					"UPPER_DECK",
					"MIDDLE_DECK",
					"LOWER_DECK"
				]
			},
			"WagonProductEnum": {
				"type": "string",
				"description": "Product type for train.",
				"enum": [
					"ICE_T",
					"ICE_1",
					"ICE_2",
					"ICE_3",
					"ICE_4",
					"ICE_5",
					"UNDEFINED"
				]
			},
			"WagonResponse": {
				"required": [
					"wagons"
				],
				"type": "object",
				"properties": {
					"wagons": {
						"type": "array",
						"description": "List of wagons.",
						"items": {
							"$ref": "#/components/schemas/Wagon"
						}
					}
				},
				"description": "Wagon layout response."
			},
			"ProviderValidatorItem": {
				"type": "object",
				"properties": {
					"provider": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"ProviderValidatorResponse": {
				"type": "object",
				"properties": {
					"invalidations": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProviderValidatorItem"
						}
					}
				}
			},
			"PoiProviderEnum": {
				"type": "string",
				"description": "Geoserver provider classification for poi: Request a poi provided by the RI-MAPS Team = DB or OSM or DB and OSM as fallback.",
				"enum": [
					"DB",
					"OSM",
					"ALT"
				]
			},
			"StationProviderEnum": {
				"type": "string",
				"description": "Geoserver provider classification for station: Request a station provided by the RI-MAPS Team = DB or DB and OSM as fallback.",
				"enum": [
					"DB",
					"OSM",
					"ALT",
					"DB_ALT_OSM"
				]
			},
			"RrtGeometryTypeEnum": {
				"type": "string",
				"description": "Possible Points Of Interest Types of rail replacement transport",
				"enum": [
					"POINT",
					"LINE",
					"AREA"
				]
			},
			"RrtPoint": {
				"required": [
					"geometry"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"id": {
						"type": "string",
						"description": "Id of rail replacement transport point."
					},
					"geometryType": {
						"$ref": "#/components/schemas/RrtGeometryTypeEnum"
					},
					"text": {
						"type": "string",
						"description": "Description of rail replacement transport point."
					},
					"type": {
						"$ref": "#/components/schemas/RrtPointTypeEnum"
					},
					"labelPosition": {
						"type": "string",
						"description": "label position of point."
					},
					"evaNumber": {
						"type": "integer",
						"description": "Number of related Station in EVA Application.",
						"format": "int32"
					},
					"rl100": {
						"type": "string",
						"description": "Number of related Station in RIL100 Application."
					},
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "Assigned Zone-ID of rail replacement transport point."
					},
					"walkDescription": {
						"type": "string",
						"description": "Walk description to rail replacement transport point. - ONLY if RrtPointTypeEnum == SEV -"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"dhid": {
						"type": "string"
					}
				},
				"description": "List of available points of rail replacement transport"
			},
			"RrtPointTypeEnum": {
				"type": "string",
				"description": "Possible Points Of Interest Types of rail replacement transport",
				"enum": [
					"ELEVATOR",
					"EXIT",
					"BUS",
					"ESCALATOR",
					"RAMP",
					"CITY_TRAIN",
					"SEV",
					"TAXI",
					"TRAM",
					"STAIR",
					"SUBWAY",
					"ROUTING",
					"ROUTING_BARRIER_FREE",
					"PLATFORM"
				]
			},
			"RrtResponse": {
				"required": [
					"viewPort"
				],
				"type": "object",
				"properties": {
					"rrtPoints": {
						"type": "array",
						"description": "List of available points of rail replacement transport",
						"items": {
							"$ref": "#/components/schemas/RrtPoint"
						}
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					}
				},
				"description": "points for particular rail replacement transport."
			},
			"FeatureRrtPointGeo": {
				"required": [
					"bbox",
					"geometry",
					"id",
					"properties",
					"type"
				],
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"bbox": {
						"type": "array",
						"items": {
							"type": "number",
							"format": "double"
						}
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"properties": {
						"$ref": "#/components/schemas/RrtPointGeo"
					}
				}
			},
			"RrtPointGeo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"id": {
						"type": "string",
						"description": "Id of rail replacement transport point."
					},
					"geometryType": {
						"$ref": "#/components/schemas/RrtGeometryTypeEnum"
					},
					"text": {
						"type": "string",
						"description": "Description of rail replacement transport point."
					},
					"type": {
						"$ref": "#/components/schemas/RrtPointTypeEnum"
					},
					"labelPosition": {
						"type": "string",
						"description": "label position of point."
					},
					"evaNumber": {
						"type": "integer",
						"description": "Number of related Station in EVA Application.",
						"format": "int32"
					},
					"rl100": {
						"type": "string",
						"description": "Number of related Station in RIL100 Application."
					},
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "Assigned Zone-ID of rail replacement transport point."
					},
					"walkDescription": {
						"type": "string",
						"description": "Walk description to rail replacement transport point. - ONLY if RrtPointTypeEnum == SEV -"
					},
					"dhid": {
						"type": "string"
					}
				},
				"description": "Start Point of rail replacement transport."
			},
			"RrtResponseGeo": {
				"required": [
					"bbox",
					"id",
					"totalFeatures",
					"type"
				],
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"totalFeatures": {
						"type": "integer",
						"format": "int32"
					},
					"bbox": {
						"type": "array",
						"items": {
							"type": "number",
							"format": "double"
						}
					},
					"features": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FeatureRrtPointGeo"
						}
					}
				},
				"description": "points for particular rail replacement transport (GeoJson FeatureCollection)."
			},
			"LevelEnum": {
				"type": "string",
				"description": "Type of level within station.",
				"enum": [
					"BASEMENT_FLOOR_1",
					"BASEMENT_FLOOR_2",
					"BASEMENT_FLOOR_3",
					"BASEMENT_FLOOR_4",
					"BASEMENT_FLOOR_5",
					"BASEMENT_FLOOR_6",
					"BASEMENT_FLOOR_7",
					"BASEMENT_FLOOR_8",
					"BASEMENT_FLOOR_9",
					"GROUND_FLOOR",
					"UPPER_FLOOR_1",
					"UPPER_FLOOR_2",
					"UPPER_FLOOR_3",
					"UPPER_FLOOR_4",
					"UPPER_FLOOR_5",
					"UPPER_FLOOR_6",
					"UPPER_FLOOR_7",
					"UPPER_FLOOR_8",
					"UPPER_FLOOR_9"
				]
			},
			"RouteIndoorResponse": {
				"required": [
					"length",
					"segments",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"segments": {
						"type": "array",
						"description": "List of segments with detailed info on length, level and type.",
						"items": {
							"$ref": "#/components/schemas/RouteIndoorSegment"
						}
					},
					"length": {
						"type": "number",
						"description": "Length to walk in meters.",
						"format": "double"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					}
				},
				"description": "Response for indoor routing."
			},
			"RouteIndoorSegment": {
				"required": [
					"length",
					"level",
					"polyline",
					"type"
				],
				"type": "object",
				"properties": {
					"type": {
						"$ref": "#/components/schemas/RouteIndoorSegmentTypeEnum"
					},
					"level": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"fromLevel": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"toLevel": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"length": {
						"type": "number",
						"description": "Length to walk in meters.",
						"format": "double"
					},
					"polyline": {
						"type": "array",
						"description": "Polyline for segment.",
						"items": {
							"$ref": "#/components/schemas/Coordinate2D"
						}
					}
				},
				"description": "Indoor segment for indoor routing."
			},
			"RouteIndoorSegmentTypeEnum": {
				"type": "string",
				"description": "Typ of segment.",
				"enum": [
					"WALK",
					"STAIRS",
					"ESCALATOR",
					"ELEVATOR",
					"RAMP"
				]
			},
			"filterGroup": {
				"type": "string",
				"description": "Possible Points Of Interest Groups",
				"enum": [
					"TICKETS_AND_TRIP_INFO",
					"PLATFORMS_AND_LONG_DISTANCE_TRANSPORT",
					"PUBLIC_TRANSPORTATION",
					"INDIVIDUAL_MOBILITY",
					"STATION_FACILITY",
					"GASTRONOMY_AND_FOOD",
					"SHOPPING",
					"SERVICES",
					"ROUTING",
					"OTHER",
					"UNDEFINED"
				]
			},
			"filterType": {
				"type": "string",
				"description": "Possible Points Of Interest Types",
				"example": "BAKERY",
				"enum": [
					"DB_INFORMATION",
					"DB_TRAVEL_CENTER",
					"TICKETS",
					"TOURIST_INFORMATION",
					"PLATFORM",
					"PLATFORM_SECTOR_CUBE",
					"AIRPORT",
					"COACH",
					"FERRY",
					"CITY_TRAIN",
					"SUBWAY",
					"BUS",
					"TRAM",
					"RAIL_REPLACEMENT_TRANSPORT",
					"TAXI",
					"FLINKSTER",
					"CARSHARING",
					"RENTAL_CAR",
					"PARKING_AREA",
					"PARKING_DECK",
					"CALL_A_BIKE",
					"BIKE_RENTAL",
					"BIKE_PARKING_AREA",
					"BIKE_STATION",
					"TOILET",
					"TOILET_HANDICAPPED",
					"WAITING_AREA",
					"LOCKER",
					"BAGGAGE_ROOM",
					"WIFI",
					"LETTERBOX",
					"CASHPOINT",
					"RAILWAY_MISSION",
					"FEDERAL_POLICE",
					"LOST_AND_FOUND",
					"DB_LOUNGE",
					"FOOD",
					"RESTAURANT",
					"COFFEE_SHOP",
					"FAST_FOOD",
					"BAKERY",
					"SUPERMARKET",
					"INN",
					"SHOPPING_COMMON",
					"HEALTH",
					"FLOWERS",
					"PRESS",
					"FASHION",
					"PHARMACY",
					"SERVICE_COMMON",
					"HOTEL",
					"TRAVEL_AGENCY",
					"POST",
					"FINANCIAL_INSTITUTE",
					"ENTERTAINMENT",
					"STAIR",
					"ESCALATOR",
					"ELEVATOR",
					"RAMP",
					"ENTRANCE_EXIT",
					"UNDEFINED"
				]
			},
			"Address": {
				"required": [
					"city",
					"country",
					"postalCode",
					"state",
					"street"
				],
				"type": "object",
				"properties": {
					"country": {
						"type": "string",
						"description": "Country of address."
					},
					"state": {
						"type": "string",
						"description": "State of address"
					},
					"city": {
						"type": "string",
						"description": "City of address."
					},
					"postalCode": {
						"type": "string",
						"description": "Postalcode of address."
					},
					"street": {
						"type": "string",
						"description": "Street of address."
					},
					"houseNumber": {
						"type": "string",
						"description": "House number of address."
					}
				},
				"description": "Address information."
			},
			"Contact": {
				"required": [
					"name",
					"refs",
					"type"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of contact"
					},
					"type": {
						"$ref": "#/components/schemas/ContactTypeEnum"
					},
					"refs": {
						"type": "array",
						"description": "List of contact addresses.",
						"items": {
							"type": "string",
							"description": "List of contact addresses."
						}
					}
				},
				"description": "Contact information."
			},
			"ContactTypeEnum": {
				"type": "string",
				"description": "Type of contact.",
				"enum": [
					"EMAIL",
					"FAX",
					"MOBILE",
					"PHONE",
					"URL"
				]
			},
			"Opening": {
				"required": [
					"openingTimes"
				],
				"type": "object",
				"properties": {
					"openingTimes": {
						"type": "array",
						"description": "List of opening times.",
						"items": {
							"$ref": "#/components/schemas/OpeningTime"
						}
					},
					"openingDates": {
						"type": "array",
						"description": "List of opening days.",
						"items": {
							"$ref": "#/components/schemas/OpeningDate"
						}
					}
				},
				"description": "Time Table of openings for poi."
			},
			"OpeningDate": {
				"type": "object",
				"properties": {
					"openDates": {
						"type": "array",
						"description": "List of opened dates.",
						"items": {
							"type": "string",
							"description": "List of opened dates."
						}
					},
					"closeDates": {
						"type": "array",
						"description": "List of closed dates.",
						"items": {
							"type": "string",
							"description": "List of closed dates."
						}
					}
				},
				"description": "List of opening days."
			},
			"OpeningTime": {
				"type": "object",
				"properties": {
					"days": {
						"type": "string",
						"description": "Open days of week."
					},
					"openTimes": {
						"type": "array",
						"description": "Opened times of days.",
						"items": {
							"type": "string",
							"description": "Opened times of days."
						}
					},
					"closeTimes": {
						"type": "array",
						"description": "Closed times of days.",
						"items": {
							"type": "string",
							"description": "Closed times of days."
						}
					}
				},
				"description": "List of opening times."
			},
			"Poi": {
				"required": [
					"displayPosition",
					"geometry",
					"group",
					"name",
					"poiID",
					"provider",
					"type",
					"viewPort",
					"zoneID"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"detail": {
						"type": "string",
						"description": "Detail information for poi."
					},
					"type": {
						"$ref": "#/components/schemas/PoiTypeEnum"
					},
					"group": {
						"$ref": "#/components/schemas/PoiGroupEnum"
					},
					"level": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"displayPosition": {
						"$ref": "#/components/schemas/Coordinate2D"
					},
					"provider": {
						"$ref": "#/components/schemas/PoiProviderEnum"
					},
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "ZoneId of poi."
					},
					"buildingID": {
						"type": "string",
						"description": "BuildingId of poi."
					},
					"poiID": {
						"type": "string",
						"description": "PoiId of poi, unique within one data provider and station but not permanent."
					},
					"lotID": {
						"type": "string",
						"description": "LotId of poi, groups pois on the same area."
					},
					"routingPositions": {
						"type": "array",
						"description": "Routing positions for poi.",
						"items": {
							"$ref": "#/components/schemas/Coordinate2D"
						}
					},
					"address": {
						"$ref": "#/components/schemas/Address"
					},
					"contacts": {
						"type": "array",
						"description": "Contacts of poi.",
						"items": {
							"$ref": "#/components/schemas/Contact"
						}
					},
					"openings": {
						"type": "array",
						"description": "Time Table of openings for poi.",
						"items": {
							"$ref": "#/components/schemas/Opening"
						}
					},
					"display": {
						"type": "boolean"
					}
				},
				"description": "Point of interest."
			},
			"PoiGroupEnum": {
				"type": "string",
				"description": "Possible Points Of Interest Groups",
				"enum": [
					"TICKETS_AND_TRIP_INFO",
					"PLATFORMS_AND_LONG_DISTANCE_TRANSPORT",
					"PUBLIC_TRANSPORTATION",
					"INDIVIDUAL_MOBILITY",
					"STATION_FACILITY",
					"GASTRONOMY_AND_FOOD",
					"SHOPPING",
					"SERVICES",
					"ROUTING",
					"OTHER",
					"UNDEFINED"
				]
			},
			"PoiIndoorResponse": {
				"required": [
					"viewPort"
				],
				"type": "object",
				"properties": {
					"pois": {
						"type": "array",
						"description": "List of available pois for request zoneid",
						"items": {
							"$ref": "#/components/schemas/Poi"
						}
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					}
				},
				"description": "Response for indoor pois for particular station."
			},
			"PoiTypeEnum": {
				"type": "string",
				"description": "Possible Points Of Interest Types",
				"enum": [
					"DB_INFORMATION",
					"DB_TRAVEL_CENTER",
					"TICKETS",
					"TOURIST_INFORMATION",
					"PLATFORM",
					"PLATFORM_SECTOR_CUBE",
					"AIRPORT",
					"COACH",
					"FERRY",
					"CITY_TRAIN",
					"SUBWAY",
					"BUS",
					"TRAM",
					"RAIL_REPLACEMENT_TRANSPORT",
					"TAXI",
					"FLINKSTER",
					"CARSHARING",
					"RENTAL_CAR",
					"PARKING_AREA",
					"PARKING_DECK",
					"CALL_A_BIKE",
					"BIKE_RENTAL",
					"BIKE_PARKING_AREA",
					"BIKE_STATION",
					"TOILET",
					"TOILET_HANDICAPPED",
					"WAITING_AREA",
					"LOCKER",
					"BAGGAGE_ROOM",
					"WIFI",
					"LETTERBOX",
					"CASHPOINT",
					"RAILWAY_MISSION",
					"FEDERAL_POLICE",
					"LOST_AND_FOUND",
					"DB_LOUNGE",
					"FOOD",
					"RESTAURANT",
					"COFFEE_SHOP",
					"FAST_FOOD",
					"BAKERY",
					"SUPERMARKET",
					"INN",
					"SHOPPING_COMMON",
					"HEALTH",
					"FLOWERS",
					"PRESS",
					"FASHION",
					"PHARMACY",
					"SERVICE_COMMON",
					"HOTEL",
					"TRAVEL_AGENCY",
					"POST",
					"FINANCIAL_INSTITUTE",
					"ENTERTAINMENT",
					"STAIR",
					"ESCALATOR",
					"ELEVATOR",
					"RAMP",
					"ENTRANCE_EXIT",
					"UNDEFINED"
				]
			},
			"PlatformProviderEnum": {
				"type": "string",
				"description": "Geoserver provider classification for platform: Request a platform provided by the RI-MAPS Team = DB or OSM or DB and OSM as fallback.",
				"enum": [
					"DB",
					"OSM",
					"ALT"
				]
			},
			"Platform": {
				"required": [
					"geometry",
					"level",
					"name",
					"provider",
					"tracks",
					"viewPort",
					"zoneID"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"provider": {
						"$ref": "#/components/schemas/PlatformProviderEnum"
					},
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "ZoneId of platform."
					},
					"category": {
						"$ref": "#/components/schemas/PlatformCategoryEnum"
					},
					"type": {
						"$ref": "#/components/schemas/PlatformTypeEnum"
					},
					"buildingID": {
						"type": "string",
						"description": "BuildingId of platform."
					},
					"poiID": {
						"type": "string",
						"description": "PoiId of platform."
					},
					"lotID": {
						"type": "string",
						"description": "LotId of platform."
					},
					"level": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"tracks": {
						"type": "array",
						"description": "Tracks for platform.",
						"items": {
							"$ref": "#/components/schemas/Track"
						}
					}
				},
				"description": "Platform within station."
			},
			"PlatformCategoryEnum": {
				"type": "string",
				"description": "Possible Platform Types",
				"enum": [
					"SECTION",
					"TRACK"
				]
			},
			"PlatformResponse": {
				"required": [
					"platforms",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"platforms": {
						"type": "array",
						"description": "List of platforms that match provided criterias.",
						"items": {
							"$ref": "#/components/schemas/Platform"
						}
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					}
				},
				"description": "Platforms for particular station."
			},
			"PlatformTypeEnum": {
				"type": "string",
				"description": "Possible Platform Types",
				"enum": [
					"PLATFORM",
					"TRACK",
					"BUS_PLATFORM",
					"BUS_TRACK",
					"TRAM_PLATFORM",
					"TRAM_TRACK"
				]
			},
			"Sector": {
				"required": [
					"geometry",
					"name",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"cubePosition": {
						"$ref": "#/components/schemas/Coordinate2D"
					}
				},
				"description": "Sector for a particular platform."
			},
			"Track": {
				"required": [
					"geometry",
					"name",
					"sectors",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"sectors": {
						"type": "array",
						"description": "List of sectors for track.",
						"items": {
							"$ref": "#/components/schemas/Sector"
						}
					}
				},
				"description": "Track of a particular platform."
			},
			"PlatformPosition": {
				"required": [
					"center",
					"geometry",
					"level",
					"name",
					"provider",
					"viewPort",
					"zoneID"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"provider": {
						"$ref": "#/components/schemas/PlatformProviderEnum"
					},
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "ZoneId of platform position."
					},
					"level": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"center": {
						"$ref": "#/components/schemas/Coordinate2D"
					}
				},
				"description": "Platform position"
			},
			"PlatformPositionResponse": {
				"required": [
					"viewPort"
				],
				"type": "object",
				"properties": {
					"platformPositions": {
						"type": "array",
						"description": "List of available position on platforms",
						"items": {
							"$ref": "#/components/schemas/PlatformPosition"
						}
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					}
				},
				"description": "Platform position response."
			},
			"PlatformDistanceMatrix": {
				"required": [
					"fromSector",
					"fromTrack",
					"handicapped",
					"length",
					"segments",
					"toSector",
					"toTrack",
					"zoneID"
				],
				"type": "object",
				"properties": {
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "Zone ID of station."
					},
					"fromTrack": {
						"type": "string",
						"description": "Name of track to start from."
					},
					"fromSector": {
						"type": "string",
						"description": "Name of sector to start from."
					},
					"toTrack": {
						"type": "string",
						"description": "Name of track to arrive at."
					},
					"toSector": {
						"type": "string",
						"description": "Name of sector to arrive at."
					},
					"length": {
						"type": "number",
						"description": "Length to walk in meters.",
						"format": "double"
					},
					"segments": {
						"type": "array",
						"description": "List of segments with detailed info on length, level and type",
						"items": {
							"$ref": "#/components/schemas/RouteIndoorSegment"
						}
					},
					"handicapped": {
						"type": "boolean",
						"description": "routing for handicapped people without stairs and escalators"
					}
				},
				"description": "Platform distance matrix on sector level."
			},
			"PlatformDistanceMatrixResponse": {
				"required": [
					"matrix"
				],
				"type": "object",
				"properties": {
					"matrix": {
						"type": "array",
						"description": "List of available distance entries",
						"items": {
							"$ref": "#/components/schemas/PlatformDistanceMatrix"
						}
					}
				},
				"description": "Platform distance matrix for particular station."
			},
			"Station": {
				"required": [
					"address",
					"category",
					"categoryDisplay",
					"evaNumber",
					"geometry",
					"hasRouting",
					"levelInit",
					"levels",
					"name",
					"position",
					"provider",
					"rl100",
					"transports",
					"viewPort",
					"zoneID"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"zoneID": {
						"pattern": "[0-9]{4}",
						"type": "string",
						"description": "Zone ID of the station."
					},
					"rl100": {
						"type": "string",
						"description": "RL100 of the station."
					},
					"evaNumber": {
						"type": "integer",
						"description": "Eva Number of the station.",
						"format": "int32"
					},
					"provider": {
						"$ref": "#/components/schemas/StationProviderEnum"
					},
					"category": {
						"$ref": "#/components/schemas/StationCategoryEnum"
					},
					"categoryDisplay": {
						"type": "string",
						"description": "Category display of station, usable to select for zoomlevels, the lower the value the higher the importance."
					},
					"hasRouting": {
						"type": "boolean",
						"description": "Station Flag for indoor routing possibility."
					},
					"position": {
						"$ref": "#/components/schemas/Coordinate2D"
					},
					"address": {
						"$ref": "#/components/schemas/Address"
					},
					"levelInit": {
						"$ref": "#/components/schemas/LevelEnum"
					},
					"levels": {
						"type": "array",
						"description": "Available levels within station.",
						"items": {
							"$ref": "#/components/schemas/LevelEnum"
						}
					},
					"transports": {
						"type": "array",
						"description": "Available transports at station.",
						"items": {
							"$ref": "#/components/schemas/TransportTypeEnum"
						}
					},
					"dhid": {
						"type": "string"
					}
				},
				"description": "Station within RI Maps."
			},
			"StationCategoryEnum": {
				"type": "string",
				"description": "Category classification for station.",
				"enum": [
					"CATEGORY_0",
					"CATEGORY_1",
					"CATEGORY_2",
					"CATEGORY_3",
					"CATEGORY_4",
					"CATEGORY_5",
					"CATEGORY_6",
					"CATEGORY_7",
					"UNKNOWN"
				]
			},
			"StationResponse": {
				"required": [
					"viewPort"
				],
				"type": "object",
				"properties": {
					"stations": {
						"type": "array",
						"description": "List of stations that match provided criterias.",
						"items": {
							"$ref": "#/components/schemas/Station"
						}
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					}
				},
				"description": "Station response."
			},
			"TransportTypeEnum": {
				"type": "string",
				"description": "Type of transport.",
				"enum": [
					"HIGH_SPEED_TRAIN",
					"INTERCITY_TRAIN",
					"INTER_REGIONAL_TRAIN",
					"REGIONAL_TRAIN",
					"CITY_TRAIN",
					"SUBWAY",
					"TRAM",
					"BUS",
					"FERRY",
					"FLIGHT",
					"BIKE",
					"SCOOTER",
					"CAR",
					"TAXI",
					"WALK",
					"UNKNOWN"
				]
			},
			"Railway": {
				"required": [
					"cost",
					"distance",
					"geometry",
					"seq",
					"viewPort"
				],
				"type": "object",
				"properties": {
					"seq": {
						"type": "integer",
						"description": "sequencenumber of section.",
						"format": "int32"
					},
					"cost": {
						"type": "number",
						"description": "cost of section.",
						"format": "double"
					},
					"distance": {
						"type": "number",
						"description": "distance of section.",
						"format": "double"
					},
					"heading": {
						"type": "string",
						"description": "heading of section."
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					}
				},
				"description": "Section between two stations."
			},
			"RailwayResponse": {
				"required": [
					"viewPort"
				],
				"type": "object",
				"properties": {
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"railways": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Railway"
						}
					}
				},
				"description": "Railway response."
			},
			"FeatureRailwayGeo": {
				"required": [
					"bbox",
					"geometry",
					"id",
					"properties",
					"type"
				],
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"bbox": {
						"type": "array",
						"items": {
							"type": "number",
							"format": "double"
						}
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"properties": {
						"$ref": "#/components/schemas/RailwayGeo"
					}
				}
			},
			"RailwayGeo": {
				"required": [
					"cost",
					"distance",
					"seq"
				],
				"type": "object",
				"properties": {
					"seq": {
						"type": "integer",
						"description": "sequencenumber of section.",
						"format": "int32"
					},
					"cost": {
						"type": "number",
						"description": "cost of section.",
						"format": "double"
					},
					"distance": {
						"type": "number",
						"description": "distance of section.",
						"format": "double"
					},
					"heading": {
						"type": "string",
						"description": "heading of section."
					}
				},
				"description": "Section between two stations (geojson)."
			},
			"RailwayResponseGeo": {
				"required": [
					"bbox",
					"id",
					"totalFeatures",
					"type"
				],
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"totalFeatures": {
						"type": "integer",
						"format": "int32"
					},
					"bbox": {
						"type": "array",
						"items": {
							"type": "number",
							"format": "double"
						}
					},
					"features": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FeatureRailwayGeo"
						}
					}
				},
				"description": "railway between stations (GeoJson FeatureCollection)."
			},
			"MetroDisruptionLineSegment": {
				"required": [
					"fromMetroStation",
					"geometry",
					"id",
					"metroStyle",
					"toMetroStation"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of disrupted line segment."
					},
					"fromMetroStation": {
						"type": "string",
						"description": "From station of disrupted line."
					},
					"toMetroStation": {
						"type": "string",
						"description": "To station of disrupted line."
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"metroStyle": {
						"$ref": "#/components/schemas/MetroStyle"
					}
				},
				"description": "List of disrupted line segments"
			},
			"MetroLabel": {
				"required": [
					"displayName",
					"geometry",
					"id",
					"labelClass",
					"metroLabelSymbols",
					"openLayersDisplayName",
					"textalign",
					"type"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of label."
					},
					"type": {
						"$ref": "#/components/schemas/MetroLabelTypeEnum"
					},
					"displayName": {
						"type": "string",
						"description": "Name of label."
					},
					"openLayersDisplayName": {
						"type": "string",
						"description": "Name of label with | as linebreak hint"
					},
					"addname": {
						"type": "string",
						"description": "Additional english name of label."
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"labelClass": {
						"$ref": "#/components/schemas/MetroLabelClassEnum"
					},
					"rotation": {
						"type": "number",
						"description": "Rotation angle of label as radians (-,+)",
						"format": "double"
					},
					"textalign": {
						"$ref": "#/components/schemas/MetroLabelTextAlignEnum"
					},
					"metroLabelSymbols": {
						"type": "array",
						"description": "Symbols at Labelposition",
						"items": {
							"$ref": "#/components/schemas/MetroLabelSymbol"
						}
					}
				},
				"description": "Label information of water area."
			},
			"MetroLabelClassEnum": {
				"type": "string",
				"description": "Possible label types.",
				"enum": [
					"UNDEFINED",
					"MOST_IMPORTANT_STATION",
					"DESTINATION_STATION",
					"LINE_STATION",
					"REGIONAL_AND_POI"
				]
			},
			"MetroLabelSymbol": {
				"required": [
					"metroStyle",
					"text"
				],
				"type": "object",
				"properties": {
					"text": {
						"type": "string",
						"description": "Text of symbol."
					},
					"metroStyle": {
						"$ref": "#/components/schemas/MetroStyle"
					}
				},
				"description": "Symbols at Labelposition"
			},
			"MetroLabelTextAlignEnum": {
				"type": "string",
				"description": "Possible label types.",
				"enum": [
					"LEFT",
					"CENTER",
					"RIGHT"
				]
			},
			"MetroLabelTypeEnum": {
				"type": "string",
				"description": "Possible label types.",
				"enum": [
					"NO_LABEL",
					"CITY_TRAIN_AND_SUBWAY",
					"TRAM_AND_BUS",
					"WATER",
					"REGIONAL",
					"POI"
				]
			},
			"MetroLine": {
				"required": [
					"description",
					"id",
					"metroLineSegments",
					"metroNodes",
					"metroStyle",
					"name"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of the line including variants."
					},
					"name": {
						"type": "string",
						"description": "Name of the Line excluding variants."
					},
					"description": {
						"type": "string",
						"description": "'Standard' flags that this transport mode is the main one, else variant hint."
					},
					"variantOf": {
						"type": "string",
						"description": "The line name this is a variant of."
					},
					"metroLineSegments": {
						"type": "array",
						"description": "List of segments the line is build of.",
						"items": {
							"$ref": "#/components/schemas/MetroLineSegment"
						}
					},
					"metroNodes": {
						"type": "array",
						"description": "List of stations operated by this transport type.",
						"items": {
							"$ref": "#/components/schemas/MetroNode"
						}
					},
					"metroStyle": {
						"$ref": "#/components/schemas/MetroStyle"
					}
				},
				"description": "List of lines operated by this transport type."
			},
			"MetroLineSegment": {
				"required": [
					"fromNode",
					"geometry",
					"id",
					"toNode",
					"virtual"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of line segment."
					},
					"fromNode": {
						"type": "string",
						"description": "From node of line segment."
					},
					"toNode": {
						"type": "string",
						"description": "To node of line segment."
					},
					"virtual": {
						"type": "boolean",
						"description": "Flag that line segment is virtual, connection of line nodes should not be drawn."
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					}
				},
				"description": "List of segments the line is build of."
			},
			"MetroNet": {
				"required": [
					"metroLines",
					"transportType"
				],
				"type": "object",
				"properties": {
					"transportType": {
						"$ref": "#/components/schemas/MetroTransportTypeEnum"
					},
					"metroLines": {
						"type": "array",
						"description": "List of lines operated by this transport type.",
						"items": {
							"$ref": "#/components/schemas/MetroLine"
						}
					},
					"mainMetroTransportType": {
						"type": "boolean"
					}
				},
				"description": "Lines and stations of a transport mode."
			},
			"MetroNetworkResponse": {
				"required": [
					"associationName",
					"cityName",
					"metroDisruptionLineSegments",
					"metroNet",
					"metroStations",
					"metroStyles",
					"metroSymbols",
					"metroWaters"
				],
				"type": "object",
				"properties": {
					"cityName": {
						"type": "string",
						"description": "City Name"
					},
					"associationName": {
						"type": "string",
						"description": "Association operating metro traffic"
					},
					"metroNet": {
						"type": "array",
						"description": "List of networks for each transport type",
						"items": {
							"$ref": "#/components/schemas/MetroNet"
						}
					},
					"metroStations": {
						"type": "array",
						"description": "List of stations",
						"items": {
							"$ref": "#/components/schemas/MetroStation"
						}
					},
					"metroDisruptionLineSegments": {
						"type": "array",
						"description": "List of disrupted line segments",
						"items": {
							"$ref": "#/components/schemas/MetroDisruptionLineSegment"
						}
					},
					"metroWaters": {
						"type": "array",
						"description": "List of water areas (polygons)",
						"items": {
							"$ref": "#/components/schemas/MetroWater"
						}
					},
					"metroSymbols": {
						"type": "array",
						"description": "List of line symbols",
						"items": {
							"$ref": "#/components/schemas/MetroSymbol"
						}
					},
					"metroStyles": {
						"$ref": "#/components/schemas/MetroStyles"
					}
				},
				"description": "Metro network layout response."
			},
			"MetroNode": {
				"required": [
					"geometry",
					"id",
					"metroStationId",
					"predIds",
					"succIds"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of node."
					},
					"metroStationId": {
						"type": "string",
						"description": "Identification of related station."
					},
					"succIds": {
						"type": "array",
						"description": "List of successor stations.",
						"items": {
							"type": "string",
							"description": "List of successor stations."
						}
					},
					"predIds": {
						"type": "array",
						"description": "List of predecessor stations.",
						"items": {
							"type": "string",
							"description": "List of predecessor stations."
						}
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					}
				},
				"description": "List of stations operated by this transport type."
			},
			"MetroStation": {
				"required": [
					"geometry",
					"groupId",
					"id",
					"metroLabels",
					"metroStyle",
					"rl100",
					"slArea"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of station."
					},
					"metroLabels": {
						"type": "array",
						"description": "List of labels.",
						"items": {
							"$ref": "#/components/schemas/MetroLabel"
						}
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"slArea": {
						"type": "boolean",
						"description": "MetroDisruptionKpiResponse area the station belongs to."
					},
					"slStart": {
						"type": "string",
						"description": "Direction at begin of disruption."
					},
					"slEnd": {
						"type": "string",
						"description": "Direction at end of disruption."
					},
					"name": {
						"type": "string",
						"description": "Shorten name of station useful for combo box."
					},
					"abbreviationName": {
						"type": "string",
						"description": "Abbreviation name of station."
					},
					"rl100": {
						"type": "string",
						"description": "RL100 Name of station."
					},
					"groupId": {
						"type": "string",
						"description": "Group identification the station belongs to."
					},
					"metroStyle": {
						"$ref": "#/components/schemas/MetroStyle"
					},
					"dhid": {
						"type": "string"
					},
					"initialDisruptionLabel": {
						"type": "boolean"
					},
					"prominent": {
						"type": "boolean"
					},
					"main": {
						"type": "boolean"
					}
				},
				"description": "List of stations"
			},
			"MetroStyle": {
				"required": [
					"id",
					"metroStyleType"
				],
				"type": "object",
				"properties": {
					"metroStyleType": {
						"type": "string",
						"description": "Type of style.",
						"enum": [
							"AREA",
							"LINE",
							"DOUBLE_TRIANGLE_SYMBOL",
							"RECTANGLE_SYMBOL"
						]
					},
					"id": {
						"type": "string",
						"description": "Identification of style."
					}
				},
				"description": "Style information hint of water area."
			},
			"MetroStyleArea": {
				"required": [
					"id",
					"metroStyleAreaMain"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of area style."
					},
					"metroStyleAreaMain": {
						"$ref": "#/components/schemas/MetroStyleAreaMain"
					}
				},
				"description": "List of possible area styles."
			},
			"MetroStyleAreaMain": {
				"required": [
					"color"
				],
				"type": "object",
				"properties": {
					"color": {
						"type": "string",
						"description": "Color rgb code of area."
					}
				},
				"description": "Style information about main part of area."
			},
			"MetroStyleDoubleTriangleSymbol": {
				"required": [
					"fillColors",
					"horizontalCap",
					"id",
					"size",
					"textColor",
					"verticalCap"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of doubleTriangleSymbol style."
					},
					"size": {
						"type": "number",
						"description": "Size of symbol as characters.",
						"format": "double"
					},
					"textColor": {
						"type": "string",
						"description": "Color of Text within Symbol"
					},
					"fillColors": {
						"type": "array",
						"description": "Two colors of left and right triangle part of rectangle Symbol",
						"items": {
							"type": "string",
							"description": "Two colors of left and right triangle part of rectangle Symbol"
						}
					},
					"verticalCap": {
						"type": "string",
						"description": "Cap on left and right side",
						"enum": [
							"BUTT",
							"FLAT",
							"ROUND",
							"SHARP"
						]
					},
					"horizontalCap": {
						"type": "string",
						"description": "Cap on up and down side",
						"enum": [
							"BUTT",
							"FLAT",
							"ROUND",
							"SHARP"
						]
					}
				}
			},
			"MetroStyleLine": {
				"required": [
					"cap",
					"getzIndex"
				],
				"type": "object",
				"properties": {
					"metroStyleLineBorder": {
						"$ref": "#/components/schemas/MetroStyleLineBorder"
					},
					"metroStyleLineMain": {
						"$ref": "#/components/schemas/MetroStyleLineMain"
					},
					"metroStyleLineDash": {
						"$ref": "#/components/schemas/MetroStyleLineDash"
					},
					"cap": {
						"type": "string",
						"description": "Cap of line.",
						"enum": [
							"BUTT",
							"FLAT",
							"ROUND",
							"SHARP"
						]
					},
					"getzIndex": {
						"type": "integer",
						"description": "Z-Index order hint of drawing.",
						"format": "int32"
					},
					"id": {
						"type": "string"
					}
				},
				"description": "List of possible line styles."
			},
			"MetroStyleLineBorder": {
				"required": [
					"color",
					"width"
				],
				"type": "object",
				"properties": {
					"color": {
						"type": "string",
						"description": "Color rgb code of border of line."
					},
					"width": {
						"type": "integer",
						"description": "Width of border of line.",
						"format": "int32"
					}
				},
				"description": "Style information about the border of the line."
			},
			"MetroStyleLineDash": {
				"required": [
					"color",
					"width"
				],
				"type": "object",
				"properties": {
					"color": {
						"type": "string",
						"description": "Color rgb code dashed line."
					},
					"width": {
						"type": "integer",
						"description": "Width of dashed ine.",
						"format": "int32"
					}
				},
				"description": "Style information about dash part of the line."
			},
			"MetroStyleLineMain": {
				"required": [
					"color",
					"width"
				],
				"type": "object",
				"properties": {
					"color": {
						"type": "string",
						"description": "Color rgb code of line."
					},
					"width": {
						"type": "integer",
						"description": "Width of line.",
						"format": "int32"
					}
				},
				"description": "Style information about main part of the line."
			},
			"MetroStyleRectangleSymbol": {
				"required": [
					"fillColors",
					"horizontalCap",
					"id",
					"size",
					"textColor",
					"verticalCap"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of doubleTriangleSymbol style."
					},
					"size": {
						"type": "number",
						"description": "Size of symbol as characters.",
						"format": "double"
					},
					"textColor": {
						"type": "string",
						"description": "Color of Text within Symbol"
					},
					"fillColors": {
						"type": "array",
						"description": "One color left of rectangle Symbol",
						"items": {
							"type": "string",
							"description": "One color left of rectangle Symbol"
						}
					},
					"verticalCap": {
						"type": "string",
						"description": "Cap on left and right side",
						"enum": [
							"BUTT",
							"FLAT",
							"ROUND",
							"SHARP"
						]
					},
					"horizontalCap": {
						"type": "string",
						"description": "Cap on up and down side",
						"enum": [
							"BUTT",
							"FLAT",
							"ROUND",
							"SHARP"
						]
					}
				}
			},
			"MetroStyles": {
				"required": [
					"metroStyleAreas",
					"metroStyleDoubleTriangleSymbols",
					"metroStyleLines",
					"metroStyleRectangleSymbols"
				],
				"type": "object",
				"properties": {
					"metroStyleAreas": {
						"type": "array",
						"description": "List of possible area styles.",
						"items": {
							"$ref": "#/components/schemas/MetroStyleArea"
						}
					},
					"metroStyleLines": {
						"type": "array",
						"description": "List of possible line styles.",
						"items": {
							"$ref": "#/components/schemas/MetroStyleLine"
						}
					},
					"metroStyleDoubleTriangleSymbols": {
						"type": "array",
						"description": "List of possible double triangle symbol styles.",
						"items": {
							"$ref": "#/components/schemas/MetroStyleDoubleTriangleSymbol"
						}
					},
					"metroStyleRectangleSymbols": {
						"type": "array",
						"description": "List of possible double rectangle symbol styles.",
						"items": {
							"$ref": "#/components/schemas/MetroStyleRectangleSymbol"
						}
					},
					"metroRectangleStyles": {
						"type": "array",
						"writeOnly": true,
						"items": {
							"$ref": "#/components/schemas/MetroStyleRectangleSymbol"
						}
					},
					"metroDoubleTriangleStyles": {
						"type": "array",
						"writeOnly": true,
						"items": {
							"$ref": "#/components/schemas/MetroStyleDoubleTriangleSymbol"
						}
					}
				},
				"description": "Styles"
			},
			"MetroSymbol": {
				"required": [
					"geometry",
					"id",
					"labelId",
					"metroStyle",
					"name",
					"type"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Identification of symbol."
					},
					"name": {
						"type": "string",
						"description": "Name of symbol."
					},
					"type": {
						"type": "integer",
						"description": "Type of symbol. 0 fill geometry, 2 display text, 1 both",
						"format": "int32"
					},
					"metroStyle": {
						"$ref": "#/components/schemas/MetroStyle"
					},
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"labelId": {
						"type": "string",
						"description": "Corresponding Label Id of symbol."
					}
				},
				"description": "List of line symbols"
			},
			"MetroTransportTypeEnum": {
				"type": "string",
				"description": "Possible transport types",
				"enum": [
					"REGIONAL_TRAIN",
					"CITY_TRAIN",
					"BUS",
					"TRAM",
					"SUBWAY",
					"FERRY"
				]
			},
			"MetroWater": {
				"required": [
					"geometry",
					"id",
					"metroLabel",
					"metroStyle"
				],
				"type": "object",
				"properties": {
					"geometry": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Feature"
							},
							{
								"$ref": "#/components/schemas/FeatureCollection"
							},
							{
								"$ref": "#/components/schemas/GeometryCollection"
							},
							{
								"$ref": "#/components/schemas/LineString"
							},
							{
								"$ref": "#/components/schemas/MultiLineString"
							},
							{
								"$ref": "#/components/schemas/MultiPoint"
							},
							{
								"$ref": "#/components/schemas/MultiPolygon"
							},
							{
								"$ref": "#/components/schemas/Point"
							},
							{
								"$ref": "#/components/schemas/Polygon"
							}
						]
					},
					"id": {
						"type": "string",
						"description": "Identification of water area type.",
						"enum": [
							"LAKE",
							"RIVER"
						]
					},
					"metroStyle": {
						"$ref": "#/components/schemas/MetroStyle"
					},
					"metroLabel": {
						"type": "array",
						"description": "Label information of water area.",
						"items": {
							"$ref": "#/components/schemas/MetroLabel"
						}
					}
				},
				"description": "List of water areas (polygons)"
			},
			"disruptionStatus": {
				"type": "string",
				"description": "Type of disruption mask.\n- CLOSED ()\n- OPEN ()",
				"example": "OPEN",
				"enum": [
					"CLOSED",
					"OPEN"
				]
			},
			"announcementStatus": {
				"type": "string",
				"description": "Type of disruption mask.\n- CLOSED ()\n- DRAFT ()\n- RELEASED ()",
				"example": "RELEASED",
				"enum": [
					"CLOSED",
					"DRAFT",
					"RELEASED"
				]
			},
			"MetroDADurationTypeEnum": {
				"type": "string",
				"description": "Type of disruption mask.\n- UNKNOWN ()\n- TBD ()\n- TEOS ()\n- ABS ()\n- REL ()",
				"enum": [
					"UNKNOWN",
					"TBD",
					"TEOS",
					"ABS",
					"REL"
				]
			},
			"MetroDAStatusEnum": {
				"type": "string",
				"description": "Type of disruption mask.\n- CLOSED ()\n- DRAFT ()\n- RELEASED ()",
				"enum": [
					"CLOSED",
					"DRAFT",
					"RELEASED"
				]
			},
			"MetroDCAlternativeRoute": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"groupId": {
						"type": "integer",
						"format": "int32"
					},
					"prominentMetroStationId": {
						"type": "string"
					},
					"direction": {
						"type": "string"
					},
					"metroDCSegments": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDCSegment"
						}
					}
				}
			},
			"MetroDCLine": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"lineId": {
						"type": "string"
					},
					"metroDCRoutes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDCRoute"
						}
					},
					"metroDCAlternativeRoutes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDCAlternativeRoute"
						}
					},
					"status": {
						"type": "string",
						"enum": [
							"CANCELED",
							"DISRUPTED"
						]
					}
				}
			},
			"MetroDCRoute": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"lineId": {
						"type": "string"
					},
					"fromNodeId": {
						"type": "string"
					},
					"toNodeId": {
						"type": "string"
					},
					"skippedNodeIds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"direction": {
						"type": "string"
					}
				}
			},
			"MetroDCSegment": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"metroNetId": {
						"type": "string"
					},
					"lineId": {
						"type": "string"
					},
					"fromNodeId": {
						"type": "string"
					},
					"toNodeId": {
						"type": "string"
					},
					"order": {
						"type": "integer",
						"format": "int32"
					},
					"style": {
						"$ref": "#/components/schemas/MetroStyle"
					}
				}
			},
			"MetroDMTypeEnum": {
				"type": "string",
				"description": "Type of disruption mask.\n- TIMESTAMP (Mask containing the timestamp of rendering the image)\n- TEXT (Mask with textual information)\n- DISRUPTION_MAP (Mask explaining the disruption)\n- JOURNEY_MAP (Mask showing how the journey is disrupted)\n- LINE_OVERVIEW (Mask with an overview of the effected lines)",
				"enum": [
					"TIMESTAMP",
					"TEXT",
					"DISRUPTION_MAP",
					"JOURNEY_MAP",
					"LINE_OVERVIEW",
					"OVERVIEW_MAP"
				]
			},
			"MetroDisruption": {
				"required": [
					"closedAt",
					"createdAt",
					"id",
					"lines",
					"metroDisruptionAnnouncements",
					"status",
					"updatedAt"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Unique id of the major disruption",
						"format": "int32"
					},
					"title": {
						"type": "string",
						"description": "Name of the major disruption"
					},
					"description": {
						"type": "string",
						"description": "Description of the major disruption"
					},
					"createdAt": {
						"type": "string",
						"description": "Date of creating the major disruption"
					},
					"updatedAt": {
						"type": "string",
						"description": "Date of updating the major disruption"
					},
					"closedAt": {
						"type": "string",
						"description": "Date of closing the major disruption"
					},
					"status": {
						"$ref": "#/components/schemas/MetroDisruptionStatusEnum"
					},
					"lines": {
						"type": "array",
						"description": "Affected lines of the major disruption",
						"items": {
							"type": "string",
							"description": "Affected lines of the major disruption"
						}
					},
					"metroDisruptionAnnouncements": {
						"type": "array",
						"description": "List of the announcements history or active one",
						"items": {
							"$ref": "#/components/schemas/MetroDisruptionAnnouncement"
						}
					}
				},
				"description": "List of major disruptions or active one"
			},
			"MetroDisruptionAnnouncement": {
				"required": [
					"causeId",
					"createdAt",
					"durationType",
					"id",
					"metroDisruptionLineSegmentIds",
					"metroDisruptionMasks",
					"phase",
					"status",
					"title",
					"updatedAt"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of an announcement",
						"format": "int32"
					},
					"title": {
						"type": "string",
						"description": "Title of an announcement"
					},
					"createdAt": {
						"type": "string",
						"description": "Date of creating the announcement"
					},
					"updatedAt": {
						"type": "string",
						"description": "Date of updating the announcement"
					},
					"uploadedAt": {
						"type": "string",
						"description": "Date of uploading the announcement"
					},
					"closedAt": {
						"type": "string",
						"description": "Date of closing the announcement"
					},
					"regeneratedAt": {
						"type": "string",
						"description": "Date of regenerating an announcement"
					},
					"causeId": {
						"type": "string",
						"description": "Cause of the announcement"
					},
					"duration": {
						"type": "string",
						"description": "Duration of the announcement"
					},
					"phase": {
						"type": "integer",
						"description": "Phase of the announcement",
						"format": "int32"
					},
					"status": {
						"$ref": "#/components/schemas/MetroDAStatusEnum"
					},
					"durationType": {
						"$ref": "#/components/schemas/MetroDADurationTypeEnum"
					},
					"locations": {
						"type": "array",
						"description": "Affected locations of the announcement",
						"items": {
							"type": "string",
							"description": "Affected locations of the announcement"
						}
					},
					"metroDisruptionLineSegmentIds": {
						"type": "array",
						"description": "Affected segments ids of map segments",
						"items": {
							"type": "string",
							"description": "Affected segments ids of map segments"
						}
					},
					"metroDisruptionConcept": {
						"$ref": "#/components/schemas/MetroDisruptionConcept"
					},
					"relatedDisruptionConceptId": {
						"type": "integer",
						"description": "Id of related disruption concept in use",
						"format": "int32"
					},
					"metroDisruptionMasks": {
						"type": "array",
						"description": "List of major disruption masks",
						"items": {
							"$ref": "#/components/schemas/MetroDisruptionMask"
						}
					}
				},
				"description": "Metro network disruption announcement."
			},
			"MetroDisruptionConcept": {
				"required": [
					"closedAt"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"name": {
						"type": "string"
					},
					"descriptionDE": {
						"type": "string"
					},
					"descriptionEN": {
						"type": "string"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					},
					"closedAt": {
						"type": "string",
						"description": "Date of closing the disruption concept"
					},
					"information": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"metroDCLines": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDCLine"
						}
					},
					"status": {
						"type": "string",
						"enum": [
							"DRAFT",
							"RELEASED"
						]
					},
					"type": {
						"type": "string"
					},
					"deleted": {
						"type": "boolean"
					}
				},
				"description": "MetroDisruptionKpiResponse concept in use"
			},
			"MetroDisruptionMask": {
				"required": [
					"duration",
					"id",
					"imageId",
					"imageName",
					"language",
					"mapResolution",
					"maskType",
					"renderedAt"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"description": "Id of the masks",
						"format": "int32"
					},
					"maskType": {
						"$ref": "#/components/schemas/MetroDMTypeEnum"
					},
					"lineName": {
						"type": "string",
						"description": "Affected line alternative/variant of this mask, 'all' for any line"
					},
					"line": {
						"type": "string",
						"description": "Affected line of this mask, 'all' for any line"
					},
					"language": {
						"type": "string",
						"description": "Language code in use for texts of the mask"
					},
					"prominentStationId": {
						"type": "string",
						"description": "Station id, only if a prominent station"
					},
					"imageName": {
						"type": "string",
						"description": "Image name of the masks"
					},
					"imageId": {
						"type": "string",
						"description": "Image id of the masks"
					},
					"renderedAt": {
						"type": "string",
						"description": "Date of rendering the mask"
					},
					"viewPort": {
						"$ref": "#/components/schemas/ViewPort"
					},
					"mapResolution": {
						"type": "number",
						"description": "Resolution of the underlaying map of the mask",
						"format": "double"
					},
					"duration": {
						"type": "integer",
						"description": "Default duration of displaying the mask",
						"format": "int32"
					}
				},
				"description": "Metro network disruption mask data."
			},
			"MetroDisruptionResponse": {
				"required": [
					"associationName",
					"cityName",
					"metroDisruptions"
				],
				"type": "object",
				"properties": {
					"cityName": {
						"type": "string",
						"description": "City Name"
					},
					"associationName": {
						"type": "string",
						"description": "Association operating metro traffic"
					},
					"metroDisruptions": {
						"type": "array",
						"description": "List of major disruptions or active one",
						"items": {
							"$ref": "#/components/schemas/MetroDisruption"
						}
					}
				},
				"description": "Metro network major disruption response."
			},
			"MetroDisruptionStatusEnum": {
				"type": "string",
				"description": "Type of disruption mask.\n- CLOSED ()\n- OPEN ()",
				"enum": [
					"CLOSED",
					"OPEN"
				]
			},
			"MetroDisruptionConceptResponse": {
				"required": [
					"associationName",
					"cityName",
					"metroDisruptionConcepts"
				],
				"type": "object",
				"properties": {
					"cityName": {
						"type": "string",
						"description": "City Name"
					},
					"associationName": {
						"type": "string",
						"description": "Association operating metro traffic"
					},
					"metroDisruptionConcepts": {
						"type": "array",
						"description": "List of disruption concepts",
						"items": {
							"$ref": "#/components/schemas/MetroDisruptionConcept"
						}
					}
				},
				"description": "Metro network disruption concept response."
			},
			"MetroDACauseItem": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"nameEN": {
						"type": "string"
					}
				}
			},
			"MetroDACauseResponse": {
				"required": [
					"associationName",
					"cityName"
				],
				"type": "object",
				"properties": {
					"cityName": {
						"type": "string",
						"description": "City Name"
					},
					"associationName": {
						"type": "string",
						"description": "Association operating metro traffic"
					},
					"metroDAConsumers": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDAConsumer"
						}
					},
					"metroDAPhaseDetails": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDAPhaseDetail"
						}
					},
					"metroDACauseItems": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDACauseItem"
						}
					},
					"metroConnectTexts": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDAConnectText"
						}
					},
					"metroDAProminentStations": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDAProminentStation"
						}
					},
					"metroDADurationItems": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/MetroDADurationItem"
						}
					}
				}
			},
			"MetroDAConnectText": {
				"type": "object",
				"properties": {
					"metroStationIds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"name": {
						"type": "string"
					},
					"nameEN": {
						"type": "string"
					}
				}
			},
			"MetroDAConsumer": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"nameEN": {
						"type": "string"
					}
				}
			},
			"MetroDADurationItem": {
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					},
					"timestamp": {
						"type": "string"
					}
				}
			},
			"MetroDAPhaseDetail": {
				"required": [
					"id",
					"name",
					"nameEN"
				],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Numerical id of phase"
					},
					"name": {
						"type": "string",
						"description": "German name of phase"
					},
					"nameEN": {
						"type": "string",
						"description": "English name of phase"
					},
					"initial": {
						"type": "boolean"
					}
				}
			},
			"MetroDAProminentStation": {
				"type": "object",
				"properties": {
					"metroStationId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"nameEN": {
						"type": "string"
					}
				}
			},
			"transportType": {
				"type": "string",
				"description": "Possible transport types",
				"example": "CITY_TRAIN",
				"enum": [
					"REGIONAL_TRAIN",
					"CITY_TRAIN",
					"BUS",
					"TRAM",
					"SUBWAY",
					"FERRY"
				]
			},
			"StationOSMMapVariantEnum": {
				"type": "string",
				"description": "Visible variants for osm station map.",
				"enum": [
					"STANDARD",
					"BASIC",
					"PURE"
				]
			},
			"StationDBMapVariantEnum": {
				"type": "string",
				"description": "Visible variants for db station map.",
				"enum": [
					"STANDARD",
					"BASIC",
					"PURE",
					"MOBILE"
				]
			},
			"KpiEnum": {
				"type": "string",
				"description": "KPI names.",
				"enum": [
					"RRT_COUNT",
					"RRT_ACTIVE_COUNT",
					"STATION_LIST_DB_COUNT",
					"STATION_LIST_OSM_COUNT",
					"STATION_LIST_DB_ROUTE_COUNT",
					"POI_INDOOR_DB_COUNT",
					"POI_INDOOR_OSM_COUNT",
					"INAPPLICABLE"
				]
			},
			"KPI": {
				"required": [
					"description",
					"name",
					"value"
				],
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"description": "Description of KPI."
					},
					"name": {
						"$ref": "#/components/schemas/KpiEnum"
					},
					"value": {
						"type": "string",
						"description": "Value of KPI."
					}
				},
				"description": "KPI."
			},
			"KpiResponse": {
				"required": [
					"kpis"
				],
				"type": "object",
				"properties": {
					"kpis": {
						"type": "array",
						"description": "KPIs",
						"items": {
							"$ref": "#/components/schemas/KPI"
						}
					}
				},
				"description": "KPI response."
			},
			"MetroDisruptionKPI": {
				"required": [
					"description",
					"name",
					"value"
				],
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"description": "Description of MetroDisruptionKPI."
					},
					"name": {
						"$ref": "#/components/schemas/MetroDisruptionKpiEnum"
					},
					"value": {
						"type": "string",
						"description": "Value of MetroDisruptionKPI."
					}
				},
				"description": "MetroDisruptionKPI."
			},
			"MetroDisruptionKpiEnum": {
				"type": "string",
				"description": "MetroDisruptionKpiResponse KPI names.",
				"enum": [
					"DURATION",
					"DURATION_ACTIVE",
					"DURATION_1",
					"DURATION_2",
					"DURATION_3",
					"DURATION_4",
					"DURATION_5",
					"LINES",
					"INAPPLICABLE"
				]
			},
			"MetroDisruptionKpiResponse": {
				"required": [
					"createdAt",
					"metroDisruptionKPIS",
					"name"
				],
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Metro disruption name"
					},
					"createdAt": {
						"type": "string",
						"description": "Metro disruption created"
					},
					"metroDisruptionKPIS": {
						"type": "array",
						"description": "Metro disruption KPIs",
						"items": {
							"$ref": "#/components/schemas/MetroDisruptionKPI"
						}
					}
				},
				"description": "Metro metroDisruptionKpiResponses"
			},
			"MetroKPI": {
				"required": [
					"description",
					"name",
					"value"
				],
				"type": "object",
				"properties": {
					"description": {
						"type": "string",
						"description": "Description of MetroKPI."
					},
					"name": {
						"$ref": "#/components/schemas/MetroKpiEnum"
					},
					"value": {
						"type": "string",
						"description": "Value of MetroKPI."
					}
				},
				"description": "MetroKPI."
			},
			"MetroKpiEnum": {
				"type": "string",
				"description": "Metro KPI names.",
				"enum": [
					"DISRUPTION_COUNT",
					"INAPPLICABLE"
				]
			},
			"MetroKpiResponse": {
				"required": [
					"kpis",
					"metroDisruptionKpiResponses"
				],
				"type": "object",
				"properties": {
					"kpis": {
						"type": "array",
						"description": "Metro KPIs",
						"items": {
							"$ref": "#/components/schemas/MetroKPI"
						}
					},
					"metroDisruptionKpiResponses": {
						"type": "array",
						"description": "Metro metroDisruptionKpiResponses",
						"items": {
							"$ref": "#/components/schemas/MetroDisruptionKpiResponse"
						}
					}
				},
				"description": "Metro KPI response."
			},
			"MetroKpiResponses": {
				"required": [
					"metroKpiResponse"
				],
				"type": "object",
				"properties": {
					"metroKpiResponse": {
						"type": "array",
						"description": "List of all Metros KPIs",
						"items": {
							"$ref": "#/components/schemas/MetroKpiResponse"
						}
					}
				},
				"description": "List of Metro KPI response."
			}
		},
		"securitySchemes": {
			"basic": {
				"type": "http",
				"scheme": "basic"
			}
		}
	}
}